{"mappings":"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","sources":["src/Board.ts","src/UI/UI_End.ts","src/UI/UI_Board.ts","src/Game.ts","src/UI/UI_Infos.ts","src/UI/UI_Creation.ts","src/index.ts"],"sourcesContent":["export interface Square {\n    owner: string | null,\n    linesOwners : {\n        top: string | null,\n        left: string | null,\n        right: string | null,\n        bottom: string | null\n    }\n}\n\nexport class Board {\n    board: Array<Array<Square>>\n    height: number\n    width: number\n\n    constructor(width: number, height: number) {\n        this.board = []\n        this.height = height\n        this.width = width\n        for (let i = 0; i < height; i++) {\n            let line: Array<Square> = []\n            for (let j = 0; j < width; j++) {\n                line.push({\n                    owner: null,\n                    linesOwners : {\n                        top: null,\n                        left: null,\n                        right: null,\n                        bottom: null\n                    }\n                })\n            }\n            this.board.push(line)\n        }\n    }\n\n    setSquareOwner(x: number, y: number, name: string) {\n        this.board[y][x].owner = name\n    }\n\n    setLineOwner(x: number, y: number, direction: string, name: string) {\n        switch (direction) {\n            case \"right\":\n                this.board[y][x].linesOwners.right = name\n                if (x < this.width - 1) this.board[y][x+1].linesOwners.left = name\n                break\n            case \"left\":\n                this.board[y][x].linesOwners.left = name\n                if (x > 0) this.board[y][x-1].linesOwners.right = name\n                break\n            case \"top\":\n                this.board[y][x].linesOwners.top = name\n                if (y > 0) this.board[y-1][x].linesOwners.bottom = name\n                break\n            case \"bottom\":\n                this.board[y][x].linesOwners.bottom = name\n                if (y < this.height - 1) this.board[y+1][x].linesOwners.top = name\n                break\n        }\n    }\n\n    printBoard() {\n        let str = \"\"\n        for (let i = 0; i < this.height; i++) {\n            for (let j = 0; j < this.width; j++) {\n                if (j == 0) {\n                    str += \"□ \"\n                } else {\n                    str += \" □ \"\n                }\n            }\n            str += \"\\n\"\n        }\n        console.log(str)\n    }\n}","import {Board} from \"../Board\";\nimport UI_Board from \"./UI_Board\";\nimport {Game} from \"../Game\";\nimport UI_Infos from \"./UI_Infos\";\n\nexport default class UI_End extends HTMLElement {\n\n    connectedCallback() {\n        const replayButton: HTMLButtonElement = document.querySelector(\".replay-button\")\n        replayButton.addEventListener(\"click\", () => {\n            this.replay()\n        })\n    }\n\n    constructor() {\n        super()\n\n        const overlay = document.createElement(\"div\")\n        overlay.classList.add(\"overlay\")\n\n        const container = document.createElement(\"div\")\n        container.classList.add(\"form-container\")\n\n        const endText = document.createElement(\"h1\")\n        endText.classList.add(\"end-text\")\n\n        const replayButton = document.createElement(\"button\")\n        replayButton.classList.add(\"replay-button\")\n        replayButton.appendChild(document.createTextNode(\"Rejouer\"))\n\n        container.appendChild(endText)\n        container.appendChild(replayButton)\n\n        overlay.appendChild(container)\n        this.appendChild(overlay)\n    }\n\n    setWinner(name: string | null) {\n        const endText = document.querySelector(\".end-text\")\n        if (name == null) {\n            endText.appendChild(document.createTextNode(\"Égalité\"))\n        } else {\n            endText.appendChild(document.createTextNode(\"Victoire de \" + name))\n        }\n    }\n\n    replay() {\n        window.location.reload()\n    }\n\n}","import {Game} from \"../Game\"\nimport UI_Infos from \"./UI_Infos\"\nimport UI_End from \"./UI_End\"\n\nexport default class UI_Board extends HTMLElement {\n    game: Game\n\n    get board_height() {\n        if (this.hasAttribute(\"board-height\")) {\n            return parseInt(this.getAttribute(\"board-height\"))\n        } else {\n            return 10;\n        }\n    }\n\n    get board_width() {\n        if (this.hasAttribute(\"board-width\")) {\n            return parseInt(this.getAttribute(\"board-width\"))\n        } else {\n            return 10;\n        }\n    }\n\n    connectedCallback() {\n        const boxes = document.getElementsByTagName(\"td\") \n        for (let i = 0; i < boxes.length; i++) {\n            [\"left\", \"right\", \"top\", \"bottom\"].forEach(dir => {\n                const hitbox = boxes[i].querySelector(\".hitbox-\" + dir) \n                hitbox.addEventListener(\"mouseenter\", () => {\n                    this.interractLine(Array.from(boxes[i].parentNode.children).indexOf(boxes[i]), Array.from(boxes[i].parentNode.parentNode.children).indexOf(boxes[i].parentElement), dir, \"select\", this.game.players[this.game.currentPlayer].color)\n                })\n                hitbox.addEventListener(\"mouseleave\", () => {\n                    this.interractLine(Array.from(boxes[i].parentNode.children).indexOf(boxes[i]), Array.from(boxes[i].parentNode.parentNode.children).indexOf(boxes[i].parentElement), dir, \"reset\")\n                })\n                hitbox.addEventListener(\"click\", () => {\n                    const x = Array.from(boxes[i].parentNode.children).indexOf(boxes[i])\n                    const y = Array.from(boxes[i].parentNode.parentNode.children).indexOf(boxes[i].parentElement)\n                    const currentPlayer = this.game.players[this.game.currentPlayer]\n                    this.interractLine(x, y, dir, \"click\", currentPlayer.color)\n                    const xy = this.game.playTurn(x, y, dir)\n                    \n                    const infos: UI_Infos = document.querySelector(\"game-infos\")\n                    infos.updateScore()\n                    if (xy != []) {\n                        for (let k = 0; k < xy.length; k++) {\n                            this.setBgColor(xy[k][0], xy[k][1], currentPlayer.color)\n                        }\n                    }\n\n                    if (this.game.isGameFinished()) {\n                        const endScreen = document.createElement(\"end-screen\")\n                        document.querySelector(\".app\").appendChild(endScreen)\n                        customElements.define(\"end-screen\", UI_End)\n                        UI_End.prototype.setWinner(this.game.getWinner())\n                    }\n                    \n                })\n            })\n        }\n    }\n\n    constructor() {\n        super()\n\n        const body = document.createElement(\"tbody\")\n        for (let i = 0; i < this.board_height; i++) {\n            const line = document.createElement(\"tr\");\n            for (let j = 0; j < this.board_width; j++) {\n\n                // Create dot elements\n                const dot_top_right = document.createElement(\"span\")\n                dot_top_right.className = \"dot dot-top-right\"\n                const dot_top_left = document.createElement(\"span\")\n                dot_top_left.className = \" dot dot-top-left\"\n                const dot_bottom_right = document.createElement(\"span\")\n                dot_bottom_right.className = \"dot dot-bottom-right\"\n                const dot_bottom_left = document.createElement(\"span\")\n                dot_bottom_left.className = \"dot dot-bottom-left\"\n                \n                const square = document.createElement(\"td\")\n                square.className = \"square\"\n\n                // Append dot elements\n                square.appendChild(dot_top_left)\n                if (j == this.board_width - 1) {\n                    square.appendChild(dot_top_right)\n                }\n                if (i == this.board_height - 1) {\n                    square.appendChild(dot_bottom_left)\n                }\n                if ((i == this.board_height - 1) && (j == this.board_width - 1)) {\n                    square.appendChild(dot_bottom_right)\n                }\n\n                [\"left\", \"right\", \"top\", \"bottom\"].forEach(dir => {\n                    const hitbox = document.createElement(\"span\")\n                    hitbox.className = \"hitbox hitbox-\" + dir\n                    square.appendChild(hitbox)\n                })\n\n                line.appendChild(square)\n            }\n            body.appendChild(line)\n        }\n        const table = document.createElement(\"table\")\n        table.appendChild(body)\n        this.appendChild(table)\n    }\n\n    interractLine(x: number, y: number, direction: string, interractionType: string = \"select\", color: string = \"none\") {\n        const typeString = interractionType == \"select\" ? \"selected\" : \"clicked\"\n        const table: HTMLTableElement = this.getElementsByTagName(\"table\")[0]\n        const box = table.rows[y].cells[x]\n\n        if (interractionType == \"click\" && box.className.includes(\"selected-\" + direction)) {\n            box.classList.remove(\"selected-\" + direction)\n        }\n\n        if (!box.className.includes(\"clicked-\" + direction)) {\n            switch (direction) {\n                case \"right\":\n                    if ((x < this.board_width-1)) {\n                        const neighborBox = table.rows[y].cells[x+1]\n\n                        if (interractionType == \"click\" && neighborBox.className.includes(\"selected-left\")) {\n                            neighborBox.classList.remove(\"selected-left\")\n                        }\n\n                        interractionType == \"reset\" ? [\"selected\"].forEach(c => neighborBox.classList.remove(c + \"-left\")) :\n                        neighborBox.classList.add(typeString + \"-left\") \n\n                        if (interractionType == \"click\") {\n                            neighborBox.classList.add(color + \"-left\")\n                        }\n                    }\n                    interractionType == \"reset\" ? [\"selected\"].forEach(c => box.classList.remove(c + \"-right\")) :\n                    box.classList.add(typeString + \"-right\")\n                    break\n                case \"left\":\n                    if ((x > 0)) {\n                        const neighborBox = table.rows[y].cells[x-1]\n\n                        if (interractionType == \"click\" && neighborBox.className.includes(\"selected-right\")) {\n                            neighborBox.classList.remove(\"selected-right\")\n                        }\n\n                        interractionType == \"reset\" ? [\"selected\"].forEach(c => neighborBox.classList.remove(c + \"-right\")) :\n                        neighborBox.classList.add(typeString + \"-right\")\n\n                        if (interractionType == \"click\") {\n                            neighborBox.classList.add(color + \"-right\")\n                        }\n                    }\n                    interractionType == \"reset\" ? [\"selected\"].forEach(c => box.classList.remove(c + \"-left\")) :\n                    box.classList.add(typeString + \"-left\")\n                    break\n                case \"top\":\n                    if ((y > 0)) {\n                        const neighborBox = table.rows[y-1].cells[x]\n\n                        if (interractionType == \"click\" && neighborBox.className.includes(\"selected-bottom\")) {\n                            neighborBox.classList.remove(\"selected-bottom\")\n                        }\n\n                        interractionType == \"reset\" ? [\"selected\"].forEach(c => neighborBox.classList.remove(c + \"-bottom\")) :\n                        neighborBox.classList.add(typeString + \"-bottom\")\n\n                        if (interractionType == \"click\") {\n                            neighborBox.classList.add(color + \"-bottom\")\n                        }\n                    }\n                    interractionType == \"reset\" ? [\"selected\"].forEach(c => box.classList.remove(c + \"-top\")) :\n                    box.classList.add(typeString + \"-top\")\n                    break\n                case \"bottom\":\n                    if ((y < this.board_height-1)) {\n                        const neighborBox = table.rows[y+1].cells[x]\n\n                        if (interractionType == \"click\" && neighborBox.className.includes(\"selected-\")) {\n                            neighborBox.classList.remove(\"selected-top\")\n                        }\n\n                        interractionType == \"reset\" ? [\"selected\"].forEach(c => neighborBox.classList.remove(c + \"-top\")) :\n                        neighborBox.classList.add(typeString + \"-top\")\n\n                        if (interractionType == \"click\") {\n                            neighborBox.classList.add(color + \"-top\")\n                        }\n                    }\n                    interractionType == \"reset\" ? [\"selected\"].forEach(c => box.classList.remove(c + \"-bottom\")) :\n                    box.classList.add(typeString + \"-bottom\")\n                    break\n            }\n            if (interractionType == \"click\") {\n                box.classList.add(color + \"-\" + direction)\n            }\n        }\n    }\n\n    setBgColor(x: number, y: number, color: string) {\n        const table: HTMLTableElement = this.getElementsByTagName(\"table\")[0]\n        const box = table.rows[y].cells[x]\n        box.classList.add(\"background-\" + color)\n    }\n}\n\n","import { Board, Square } from \"./Board\";\n\nexport interface Player {\n    name: string,\n    score: number,\n    color: string\n}\n\nexport class Game {\n    board: Board\n    players: Array<Player>\n    currentPlayer: number\n\n    constructor(board: Board, ...players: string[]) {\n        this.board = board;\n        const colors = [\"blue\", \"red\"]\n        this.players = []\n        let i = 0\n        players.map(playerName => {\n            this.players.push({name: playerName, score: 0, color: colors[i]})\n            i++\n        })\n        this.currentPlayer = 0\n    }\n\n    isLinePlayed(x: number, y: number, direction: string) {\n        return this.board.board[y][x].linesOwners[direction] != null\n    }\n\n    playLine(x: number, y: number, direction: string, name: string) {\n        this.board.setLineOwner(x,y,direction,name)\n    }\n\n    nextPlayer() {\n        this.currentPlayer != this.players.length - 1 ? this.currentPlayer++ : this.currentPlayer = 0\n    }\n\n    isSquareFull(square: Square): boolean {\n        return ((square.linesOwners.left != null) &&\n        (square.linesOwners.top != null) &&\n        (square.linesOwners.right != null) &&\n        (square.linesOwners.bottom != null))\n    }\n\n    isGameFinished() {\n        const boxesCount = this.board.width * this.board.height\n        let filledBoxesCount = 0\n        for (let y = 0; y < this.board.height; y++) {\n            for (let x = 0; x < this.board.width; x++) {\n                if (this.board.board[y][x].owner != null) {\n                    filledBoxesCount++\n                } else {\n                    return false\n                }\n            }\n        }\n        return filledBoxesCount == boxesCount\n    }\n\n    getWinner(): string | null {\n        if (this.players[0].score > this.players[1].score) {\n            return this.players[0].name\n        } else if (this.players[1].score > this.players[0].score) {\n            return this.players[1].name\n        } else {\n            return null\n        }\n    }\n\n    calculateBoxes() {\n        let turnScore = 0\n        let xy_arr = []\n        for (let y = 0; y < this.board.height; y++) {\n            for (let x = 0; x < this.board.width; x++) {\n                if (this.board.board[y][x].owner == null) {\n                    if (this.isSquareFull(this.board.board[y][x])) {\n                        this.board.board[y][x].owner = this.players[this.currentPlayer].name\n                        turnScore++\n                        xy_arr.push([x,y])\n                    }\n                }\n            }\n        }\n        return {score: turnScore, xy: xy_arr}\n    }\n\n    playTurn(x: number, y: number, direction: string) {\n        if (!this.isLinePlayed(x,y,direction)) {\n            this.playLine(x, y, direction, this.players[this.currentPlayer].name)\n            let calculation = this.calculateBoxes()\n            let turnScore: number = calculation.score\n            if (turnScore <= 0) {\n                this.nextPlayer()\n            } else {\n                this.players[this.currentPlayer].score += turnScore\n            }\n            return calculation.xy\n        } else {\n            return []\n        }\n        \n    }\n}","import {Game, Player} from \"../Game\"\n\nexport default class UI_Infos extends HTMLElement {\n    game: Game\n\n    constructor() {\n        super()\n        const container = document.createElement(\"div\")\n        container.classList.add(\"game-infos-container\")\n        const score1 = document.createElement(\"span\")\n        const score2 = document.createElement(\"span\")\n        score1.classList.add(\"score-1\")\n        score2.classList.add(\"score-2\")\n        score1.innerHTML = this.game.players[0].name + \" : \" + this.game.players[0].score.toString()\n        score2.innerHTML = this.game.players[1].name + \" : \" + this.game.players[1].score.toString()\n\n        const scoreDiv = document.createElement(\"div\")\n        scoreDiv.classList.add(\"scores\")\n        scoreDiv.appendChild(score1)\n        scoreDiv.appendChild(score2)\n        container.appendChild(scoreDiv)\n\n        const currentPlayer = document.createElement(\"span\")\n        currentPlayer.classList.add(\"current-player\")\n        currentPlayer.innerHTML = \"Au tour de \" + this.game.players[this.game.currentPlayer].name + \" de jouer\"\n        container.appendChild(currentPlayer)\n\n        this.appendChild(container)\n    }\n\n    updateScore() {\n        const score1: HTMLSpanElement = document.querySelector(\".score-1\")\n        const score2: HTMLSpanElement = document.querySelector(\".score-2\")\n        const currentPlayer: HTMLSpanElement = document.querySelector(\".current-player\")\n\n        score1.innerHTML = this.game.players[0].name + \" : \" + this.game.players[0].score\n        score2.innerHTML = this.game.players[1].name + \" : \" + this.game.players[1].score\n        currentPlayer.innerHTML = \"Au tour de \" + this.game.players[this.game.currentPlayer].name + \" de jouer\"\n    }\n}","import {Board} from \"../Board\";\nimport UI_Board from \"./UI_Board\";\nimport {Game} from \"../Game\";\nimport UI_Infos from \"./UI_Infos\";\n\nexport default class UI_Creation extends HTMLElement {\n\n    connectedCallback() {\n        const submitButton: HTMLButtonElement = document.querySelector(\".validate-button\")\n        submitButton.addEventListener(\"click\", () => {\n            this.createGame()\n        })\n    }\n\n    constructor() {\n        super()\n\n        const overlay = document.createElement(\"div\")\n        overlay.classList.add(\"overlay\")\n\n        const container = document.createElement(\"div\")\n        container.classList.add(\"form-container\")\n\n        const player1Input = document.createElement(\"input\")\n        player1Input.classList.add(\"player1-input\")\n        player1Input.setAttribute(\"value\", \"Joueur 1\")\n        const player2Input = document.createElement(\"input\")\n        player2Input.classList.add(\"player2-input\")\n        player2Input.setAttribute(\"value\", \"Joueur 2\")\n\n        const validateButton = document.createElement(\"button\")\n        validateButton.classList.add(\"validate-button\")\n        validateButton.appendChild(document.createTextNode(\"Valider\"))\n\n        const inputsContainer = document.createElement(\"div\")\n        inputsContainer.classList.add(\"inputs-container\")\n        inputsContainer.appendChild(player1Input)\n        inputsContainer.appendChild(player2Input)\n\n        const sizeLabel = document.createElement(\"label\")\n        sizeLabel.appendChild(document.createTextNode(\"Taille de la grille :\"))\n        const sizeInput = document.createElement(\"input\")\n        sizeInput.classList.add(\"size-input\")\n        sizeInput.setAttribute(\"type\", \"number\")\n        sizeInput.setAttribute(\"value\", \"5\")\n        sizeInput.setAttribute(\"min\", \"4\")\n        sizeInput.setAttribute(\"max\", \"20\")\n\n        container.appendChild(inputsContainer)\n        container.appendChild(sizeLabel)\n        container.appendChild(sizeInput)\n        container.appendChild(validateButton)\n\n\n        overlay.appendChild(container)\n        this.appendChild(overlay)\n    }\n\n    createGame() {\n        const sizeInput: HTMLInputElement = document.querySelector(\".size-input\")\n        const boardSize = parseInt(sizeInput.value)\n        const board = new Board(boardSize, boardSize)\n\n        const player1: HTMLInputElement = document.querySelector(\".player1-input\")\n        const p1_name = player1.value\n        const player2: HTMLInputElement = document.querySelector(\".player2-input\")\n        const p2_name = player2.value\n\n        const overlay: HTMLDivElement = document.querySelector(\".overlay\")\n        overlay.style.display = \"none\"\n\n        const ui_board = document.createElement(\"game-board\")\n        ui_board.setAttribute(\"board-width\", boardSize.toString())\n        ui_board.setAttribute(\"board-height\", boardSize.toString())\n        document.querySelector(\".app\").appendChild(ui_board)\n        customElements.define(\"game-board\", UI_Board)\n\n        const game = new Game(board, p1_name, p2_name);\n        UI_Board.prototype.game = game;\n\n        UI_Infos.prototype.game = game;\n\n        const ui_infos = document.createElement(\"game-infos\")\n        customElements.define(\"game-infos\", UI_Infos)\n        document.querySelector(\".app\").appendChild(ui_infos)\n        \n    }\n}","import UI_Creation from \"./UI/UI_Creation\"\n\ncustomElements.define(\"game-creation\", UI_Creation)\n"],"names":["$bcd369778f872d1f$export$dc537a3a3893548e","constructor","width","height","this","board","i","line","j","push","owner","linesOwners","top","left","right","bottom","setSquareOwner","x","y","name","setLineOwner","direction","printBoard","str","console","log","$06eff6019c405e82$export$2e2bcd8739ae039","HTMLElement","connectedCallback","document","querySelector","addEventListener","replay","super","overlay","createElement","classList","add","container","endText","replayButton","appendChild","createTextNode","setWinner","window","location","reload","$d759c8766534d048$export$2e2bcd8739ae039","board_height","hasAttribute","parseInt","getAttribute","board_width","boxes","getElementsByTagName","length","forEach","dir","hitbox","interractLine","Array","from","parentNode","children","indexOf","parentElement","game","players","currentPlayer","color","xy","playTurn","updateScore","k","setBgColor","isGameFinished","endScreen","customElements","define","prototype","getWinner","body","dot_top_right","className","dot_top_left","dot_bottom_right","dot_bottom_left","square","table","interractionType","typeString","box","rows","cells","includes","remove","neighborBox","c","$7b066675d1aa79fa$export$985739bfa5723e08","colors","map","playerName","score","isLinePlayed","playLine","nextPlayer","isSquareFull","boxesCount","filledBoxesCount","calculateBoxes","turnScore","xy_arr","calculation","$e90b79a595231448$export$2e2bcd8739ae039","score1","score2","innerHTML","toString","scoreDiv","$7e78193218ebb0a2$export$2e2bcd8739ae039","createGame","player1Input","setAttribute","player2Input","validateButton","inputsContainer","sizeLabel","sizeInput","boardSize","value","p1_name","p2_name","style","display","ui_board","ui_infos"],"version":3,"file":"index.c68d64ed.js.map"}