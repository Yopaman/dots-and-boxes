{"mappings":"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","sources":["src/Board.ts","src/UI/UI_Board.ts","src/Game.ts","src/UI/UI_Infos.ts","src/UI/UI_Creation.ts","src/index.ts"],"sourcesContent":["export interface Square {\r\n    owner: string | null,\r\n    linesOwners : {\r\n        top: string | null,\r\n        left: string | null,\r\n        right: string | null,\r\n        bottom: string | null\r\n    }\r\n}\r\n\r\nexport class Board {\r\n    board: Array<Array<Square>>\r\n    height: number\r\n    width: number\r\n\r\n    constructor(width: number, height: number) {\r\n        this.board = []\r\n        this.height = height\r\n        this.width = width\r\n        for (let i = 0; i < height; i++) {\r\n            let line: Array<Square> = []\r\n            for (let j = 0; j < width; j++) {\r\n                line.push({\r\n                    owner: null,\r\n                    linesOwners : {\r\n                        top: null,\r\n                        left: null,\r\n                        right: null,\r\n                        bottom: null\r\n                    }\r\n                })\r\n            }\r\n            this.board.push(line)\r\n        }\r\n    }\r\n\r\n    setSquareOwner(x: number, y: number, name: string) {\r\n        this.board[y][x].owner = name\r\n    }\r\n\r\n    setLineOwner(x: number, y: number, direction: string, name: string) {\r\n        switch (direction) {\r\n            case \"right\":\r\n                this.board[y][x].linesOwners.right = name\r\n                if (x < this.width - 1) this.board[y][x+1].linesOwners.left = name\r\n                break\r\n            case \"left\":\r\n                this.board[y][x].linesOwners.left = name\r\n                if (x > 0) this.board[y][x-1].linesOwners.right = name\r\n                break\r\n            case \"top\":\r\n                this.board[y][x].linesOwners.top = name\r\n                if (y > 0) this.board[y-1][x].linesOwners.bottom = name\r\n                break\r\n            case \"bottom\":\r\n                this.board[y][x].linesOwners.bottom = name\r\n                if (y < this.height - 1) this.board[y+1][x].linesOwners.top = name\r\n                break\r\n        }\r\n    }\r\n\r\n    printBoard() {\r\n        let str = \"\"\r\n        for (let i = 0; i < this.height; i++) {\r\n            for (let j = 0; j < this.width; j++) {\r\n                if (j == 0) {\r\n                    str += \"□ \"\r\n                } else {\r\n                    str += \" □ \"\r\n                }\r\n            }\r\n            str += \"\\n\"\r\n        }\r\n        console.log(str)\r\n    }\r\n}","import {Game} from \"../Game\";\r\nimport UI_Infos from \"./UI_Infos\";\r\n\r\nexport default class UI_Board extends HTMLElement {\r\n    game: Game\r\n\r\n    get board_height() {\r\n        if (this.hasAttribute(\"board-height\")) {\r\n            return parseInt(this.getAttribute(\"board-height\"))\r\n        } else {\r\n            return 10;\r\n        }\r\n    }\r\n\r\n    get board_width() {\r\n        if (this.hasAttribute(\"board-width\")) {\r\n            return parseInt(this.getAttribute(\"board-width\"))\r\n        } else {\r\n            return 10;\r\n        }\r\n    }\r\n\r\n    connectedCallback() {\r\n        const boxes = document.getElementsByTagName(\"td\") \r\n        for (let i = 0; i < boxes.length; i++) {\r\n            [\"left\", \"right\", \"top\", \"bottom\"].forEach(dir => {\r\n                const hitbox = boxes[i].querySelector(\".hitbox-\" + dir) \r\n                hitbox.addEventListener(\"mouseenter\", () => {\r\n                    this.interractLine(Array.from(boxes[i].parentNode.children).indexOf(boxes[i]), Array.from(boxes[i].parentNode.parentNode.children).indexOf(boxes[i].parentElement), dir, \"select\", this.game.players[this.game.currentPlayer].color)\r\n                })\r\n                hitbox.addEventListener(\"mouseleave\", () => {\r\n                    this.interractLine(Array.from(boxes[i].parentNode.children).indexOf(boxes[i]), Array.from(boxes[i].parentNode.parentNode.children).indexOf(boxes[i].parentElement), dir, \"reset\")\r\n                })\r\n                hitbox.addEventListener(\"click\", () => {\r\n                    const x = Array.from(boxes[i].parentNode.children).indexOf(boxes[i])\r\n                    const y = Array.from(boxes[i].parentNode.parentNode.children).indexOf(boxes[i].parentElement)\r\n                    const currentPlayer = this.game.players[this.game.currentPlayer]\r\n                    console.log(currentPlayer)\r\n                    this.interractLine(x, y, dir, \"click\", currentPlayer.color)\r\n                    const xy = this.game.playTurn(x, y, dir)\r\n                    \r\n                    const infos: UI_Infos = document.querySelector(\"game-infos\")\r\n                    infos.updateScore()\r\n                    if (xy != []) {\r\n                        for (let k = 0; k < xy.length; k++) {\r\n                            this.setBgColor(xy[k][0], xy[k][1], currentPlayer.color)\r\n                        }\r\n                    }\r\n                    \r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        super()\r\n\r\n        const body = document.createElement(\"tbody\")\r\n        for (let i = 0; i < this.board_height; i++) {\r\n            const line = document.createElement(\"tr\");\r\n            for (let j = 0; j < this.board_width; j++) {\r\n\r\n                // Create dot elements\r\n                const dot_top_right = document.createElement(\"span\")\r\n                dot_top_right.className = \"dot dot-top-right\"\r\n                const dot_top_left = document.createElement(\"span\")\r\n                dot_top_left.className = \" dot dot-top-left\"\r\n                const dot_bottom_right = document.createElement(\"span\")\r\n                dot_bottom_right.className = \"dot dot-bottom-right\"\r\n                const dot_bottom_left = document.createElement(\"span\")\r\n                dot_bottom_left.className = \"dot dot-bottom-left\"\r\n                \r\n                const square = document.createElement(\"td\")\r\n                square.className = \"square\"\r\n\r\n                // Append dot elements\r\n                square.appendChild(dot_top_left)\r\n                if (j == this.board_width - 1) {\r\n                    square.appendChild(dot_top_right)\r\n                }\r\n                if (i == this.board_height - 1) {\r\n                    square.appendChild(dot_bottom_left)\r\n                }\r\n                if ((i == this.board_height - 1) && (j == this.board_width - 1)) {\r\n                    square.appendChild(dot_bottom_right)\r\n                }\r\n\r\n                [\"left\", \"right\", \"top\", \"bottom\"].forEach(dir => {\r\n                    const hitbox = document.createElement(\"span\")\r\n                    hitbox.className = \"hitbox hitbox-\" + dir\r\n                    square.appendChild(hitbox)\r\n                })\r\n\r\n                line.appendChild(square)\r\n            }\r\n            body.appendChild(line)\r\n        }\r\n        const table = document.createElement(\"table\")\r\n        table.appendChild(body)\r\n        this.appendChild(table)\r\n    }\r\n\r\n    interractLine(x: number, y: number, direction: string, interractionType: string = \"select\", color: string = \"none\") {\r\n        const typeString = interractionType == \"select\" ? \"selected\" : \"clicked\"\r\n        const table: HTMLTableElement = this.getElementsByTagName(\"table\")[0]\r\n        const box = table.rows[y].cells[x]\r\n\r\n        if (interractionType == \"click\" && box.className.includes(\"selected-\" + direction)) {\r\n            box.classList.remove(\"selected-\" + direction)\r\n        }\r\n\r\n        if (!box.className.includes(\"clicked-\" + direction)) {\r\n            switch (direction) {\r\n                case \"right\":\r\n                    if ((x < this.board_width-1)) {\r\n                        const neighborBox = table.rows[y].cells[x+1]\r\n\r\n                        if (interractionType == \"click\" && neighborBox.className.includes(\"selected-left\")) {\r\n                            neighborBox.classList.remove(\"selected-left\")\r\n                        }\r\n\r\n                        interractionType == \"reset\" ? [\"selected\"].forEach(c => neighborBox.classList.remove(c + \"-left\")) :\r\n                        neighborBox.classList.add(typeString + \"-left\") \r\n\r\n                        if (interractionType == \"click\") {\r\n                            neighborBox.classList.add(color + \"-left\")\r\n                        }\r\n                    }\r\n                    interractionType == \"reset\" ? [\"selected\"].forEach(c => box.classList.remove(c + \"-right\")) :\r\n                    box.classList.add(typeString + \"-right\")\r\n                    break\r\n                case \"left\":\r\n                    if ((x > 0)) {\r\n                        const neighborBox = table.rows[y].cells[x-1]\r\n\r\n                        if (interractionType == \"click\" && neighborBox.className.includes(\"selected-right\")) {\r\n                            neighborBox.classList.remove(\"selected-right\")\r\n                        }\r\n\r\n                        interractionType == \"reset\" ? [\"selected\"].forEach(c => neighborBox.classList.remove(c + \"-right\")) :\r\n                        neighborBox.classList.add(typeString + \"-right\")\r\n\r\n                        if (interractionType == \"click\") {\r\n                            neighborBox.classList.add(color + \"-right\")\r\n                        }\r\n                    }\r\n                    interractionType == \"reset\" ? [\"selected\"].forEach(c => box.classList.remove(c + \"-left\")) :\r\n                    box.classList.add(typeString + \"-left\")\r\n                    break\r\n                case \"top\":\r\n                    if ((y > 0)) {\r\n                        const neighborBox = table.rows[y-1].cells[x]\r\n\r\n                        if (interractionType == \"click\" && neighborBox.className.includes(\"selected-bottom\")) {\r\n                            neighborBox.classList.remove(\"selected-bottom\")\r\n                        }\r\n\r\n                        interractionType == \"reset\" ? [\"selected\"].forEach(c => neighborBox.classList.remove(c + \"-bottom\")) :\r\n                        neighborBox.classList.add(typeString + \"-bottom\")\r\n\r\n                        if (interractionType == \"click\") {\r\n                            neighborBox.classList.add(color + \"-bottom\")\r\n                        }\r\n                    }\r\n                    interractionType == \"reset\" ? [\"selected\"].forEach(c => box.classList.remove(c + \"-top\")) :\r\n                    box.classList.add(typeString + \"-top\")\r\n                    break\r\n                case \"bottom\":\r\n                    if ((y < this.board_height-1)) {\r\n                        const neighborBox = table.rows[y+1].cells[x]\r\n\r\n                        if (interractionType == \"click\" && neighborBox.className.includes(\"selected-\")) {\r\n                            neighborBox.classList.remove(\"selected-top\")\r\n                        }\r\n\r\n                        interractionType == \"reset\" ? [\"selected\"].forEach(c => neighborBox.classList.remove(c + \"-top\")) :\r\n                        neighborBox.classList.add(typeString + \"-top\")\r\n\r\n                        if (interractionType == \"click\") {\r\n                            neighborBox.classList.add(color + \"-top\")\r\n                        }\r\n                    }\r\n                    interractionType == \"reset\" ? [\"selected\"].forEach(c => box.classList.remove(c + \"-bottom\")) :\r\n                    box.classList.add(typeString + \"-bottom\")\r\n                    break\r\n            }\r\n            if (interractionType == \"click\") {\r\n                box.classList.add(color + \"-\" + direction)\r\n            }\r\n        }\r\n    }\r\n\r\n    setBgColor(x: number, y: number, color: string) {\r\n        const table: HTMLTableElement = this.getElementsByTagName(\"table\")[0]\r\n        const box = table.rows[y].cells[x]\r\n        box.classList.add(\"background-\" + color)\r\n    }\r\n}\r\n\r\n","import { Board, Square } from \"./Board\";\r\n\r\nexport interface Player {\r\n    name: string,\r\n    score: number,\r\n    color: string\r\n}\r\n\r\nexport class Game {\r\n    board: Board\r\n    players: Array<Player>\r\n    currentPlayer: number\r\n\r\n    constructor(board: Board, ...players: string[]) {\r\n        this.board = board;\r\n        const colors = [\"blue\", \"red\"]\r\n        this.players = []\r\n        let i = 0\r\n        players.map(playerName => {\r\n            this.players.push({name: playerName, score: 0, color: colors[i]})\r\n            i++\r\n        })\r\n        this.currentPlayer = 0\r\n    }\r\n\r\n    playLine(x: number, y: number, direction: string, name: string) {\r\n        this.board.setLineOwner(x,y,direction,name)\r\n    }\r\n\r\n    nextPlayer() {\r\n        this.currentPlayer != this.players.length - 1 ? this.currentPlayer++ : this.currentPlayer = 0\r\n    }\r\n\r\n    isSquareFull(square: Square): boolean {\r\n        return ((square.linesOwners.left != null) &&\r\n        (square.linesOwners.top != null) &&\r\n        (square.linesOwners.right != null) &&\r\n        (square.linesOwners.bottom != null))\r\n    }\r\n\r\n    calculateBoxes() {\r\n        let turnScore = 0\r\n        let xy_arr = []\r\n        console.log(this.board)\r\n        for (let y = 0; y < this.board.height; y++) {\r\n            for (let x = 0; x < this.board.width; x++) {\r\n                if (this.board.board[y][x].owner == null) {\r\n                    if (this.isSquareFull(this.board.board[y][x])) {\r\n                        this.board.board[y][x].owner = this.players[this.currentPlayer].name\r\n                        turnScore++\r\n                        xy_arr.push([x,y])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        console.log(turnScore)\r\n        return {score: turnScore, xy: xy_arr}\r\n    }\r\n\r\n    playTurn(x: number, y: number, direction: string) {\r\n        this.playLine(x, y, direction, this.players[this.currentPlayer].name)\r\n        let calculation = this.calculateBoxes()\r\n        let turnScore: number = calculation.score\r\n        if (turnScore <= 0) {\r\n            this.nextPlayer()\r\n        } else {\r\n            this.players[this.currentPlayer].score += turnScore\r\n        }\r\n        return calculation.xy\r\n    }\r\n}","import {Game, Player} from \"../Game\"\r\n\r\nexport default class UI_Infos extends HTMLElement {\r\n    game: Game\r\n\r\n    constructor() {\r\n        super()\r\n        const container = document.createElement(\"div\")\r\n        container.classList.add(\"game-infos-container\")\r\n        const score1 = document.createElement(\"span\")\r\n        const score2 = document.createElement(\"span\")\r\n        score1.classList.add(\"score-1\")\r\n        score2.classList.add(\"score-2\")\r\n        score1.innerHTML = this.game.players[0].name + \" : \" + this.game.players[0].score.toString()\r\n        score2.innerHTML = this.game.players[1].name + \" : \" + this.game.players[1].score.toString()\r\n\r\n        const scoreDiv = document.createElement(\"div\")\r\n        scoreDiv.classList.add(\"scores\")\r\n        scoreDiv.appendChild(score1)\r\n        scoreDiv.appendChild(score2)\r\n        container.appendChild(scoreDiv)\r\n\r\n        const currentPlayer = document.createElement(\"span\")\r\n        currentPlayer.classList.add(\"current-player\")\r\n        currentPlayer.innerHTML = \"Au tour de \" + this.game.players[this.game.currentPlayer].name + \" de jouer\"\r\n        container.appendChild(currentPlayer)\r\n\r\n        this.appendChild(container)\r\n    }\r\n\r\n    updateScore() {\r\n        const score1: HTMLSpanElement = document.querySelector(\".score-1\")\r\n        const score2: HTMLSpanElement = document.querySelector(\".score-2\")\r\n        const currentPlayer: HTMLSpanElement = document.querySelector(\".current-player\")\r\n\r\n        score1.innerHTML = this.game.players[0].name + \" : \" + this.game.players[0].score\r\n        score2.innerHTML = this.game.players[1].name + \" : \" + this.game.players[1].score\r\n        currentPlayer.innerHTML = \"Au tour de \" + this.game.players[this.game.currentPlayer].name + \" de jouer\"\r\n    }\r\n}","import {Board} from \"../Board\";\r\nimport UI_Board from \"./UI_Board\";\r\nimport {Game} from \"../Game\";\r\nimport UI_Infos from \"./UI_Infos\";\r\n\r\nexport default class UI_Creation extends HTMLElement {\r\n\r\n    connectedCallback() {\r\n        const submitButton: HTMLButtonElement = document.querySelector(\".validate-button\")\r\n        submitButton.addEventListener(\"click\", () => {\r\n            this.createGame()\r\n        })\r\n    }\r\n\r\n    constructor() {\r\n        super()\r\n\r\n        const overlay = document.createElement(\"div\")\r\n        overlay.classList.add(\"overlay\")\r\n\r\n        const container = document.createElement(\"div\")\r\n        container.classList.add(\"form-container\")\r\n\r\n        const player1Input = document.createElement(\"input\")\r\n        player1Input.classList.add(\"player1-input\")\r\n        player1Input.setAttribute(\"value\", \"Joueur 1\")\r\n        const player2Input = document.createElement(\"input\")\r\n        player2Input.classList.add(\"player2-input\")\r\n        player2Input.setAttribute(\"value\", \"Joueur 2\")\r\n\r\n        const validateButton = document.createElement(\"button\")\r\n        validateButton.classList.add(\"validate-button\")\r\n        validateButton.appendChild(document.createTextNode(\"Valider\"))\r\n\r\n        const inputsContainer = document.createElement(\"div\")\r\n        inputsContainer.classList.add(\"inputs-container\")\r\n        inputsContainer.appendChild(player1Input)\r\n        inputsContainer.appendChild(player2Input)\r\n\r\n        const sizeLabel = document.createElement(\"label\")\r\n        sizeLabel.appendChild(document.createTextNode(\"Taille de la grille :\"))\r\n        const sizeInput = document.createElement(\"input\")\r\n        sizeInput.classList.add(\"size-input\")\r\n        sizeInput.setAttribute(\"type\", \"number\")\r\n        sizeInput.setAttribute(\"value\", \"5\")\r\n        sizeInput.setAttribute(\"min\", \"4\")\r\n        sizeInput.setAttribute(\"max\", \"20\")\r\n\r\n        container.appendChild(inputsContainer)\r\n        container.appendChild(sizeLabel)\r\n        container.appendChild(sizeInput)\r\n        container.appendChild(validateButton)\r\n\r\n\r\n        overlay.appendChild(container)\r\n        this.appendChild(overlay)\r\n    }\r\n\r\n    createGame() {\r\n        const sizeInput: HTMLInputElement = document.querySelector(\".size-input\")\r\n        const boardSize = parseInt(sizeInput.value)\r\n        const board = new Board(boardSize, boardSize)\r\n\r\n        const player1: HTMLInputElement = document.querySelector(\".player1-input\")\r\n        const p1_name = player1.value\r\n        const player2: HTMLInputElement = document.querySelector(\".player2-input\")\r\n        const p2_name = player2.value\r\n\r\n        const overlay: HTMLDivElement = document.querySelector(\".overlay\")\r\n        overlay.style.display = \"none\"\r\n\r\n        const ui_board = document.createElement(\"game-board\")\r\n        ui_board.setAttribute(\"board-width\", boardSize.toString())\r\n        ui_board.setAttribute(\"board-height\", boardSize.toString())\r\n        document.querySelector(\".app\").appendChild(ui_board)\r\n        customElements.define(\"game-board\", UI_Board)\r\n\r\n        const game = new Game(board, p1_name, p2_name);\r\n        UI_Board.prototype.game = game;\r\n\r\n        UI_Infos.prototype.game = game;\r\n\r\n        const ui_infos = document.createElement(\"game-infos\")\r\n        customElements.define(\"game-infos\", UI_Infos)\r\n        document.querySelector(\".app\").appendChild(ui_infos)\r\n        \r\n    }\r\n}","import {Board} from \"./Board\"\r\nimport UI_Board from \"./UI/UI_Board\"\r\nimport UI_Creation from \"./UI/UI_Creation\"\r\n\r\ncustomElements.define(\"game-creation\", UI_Creation)\r\n\r\n"],"names":["$bcd369778f872d1f$export$dc537a3a3893548e","constructor","width","height","this","board","i","line","j","push","owner","linesOwners","top","left","right","bottom","setSquareOwner","x","y","name","setLineOwner","direction","printBoard","str","console","log","$d759c8766534d048$export$2e2bcd8739ae039","HTMLElement","board_height","hasAttribute","parseInt","getAttribute","board_width","connectedCallback","boxes","document","getElementsByTagName","length","forEach","dir","hitbox","querySelector","addEventListener","interractLine","Array","from","parentNode","children","indexOf","parentElement","game","players","currentPlayer","color","xy","playTurn","updateScore","k","setBgColor","super","body","createElement","dot_top_right","className","dot_top_left","dot_bottom_right","dot_bottom_left","square","appendChild","table","interractionType","typeString","box","rows","cells","includes","classList","remove","neighborBox","c","add","$7b066675d1aa79fa$export$985739bfa5723e08","colors","map","playerName","score","playLine","nextPlayer","isSquareFull","calculateBoxes","turnScore","xy_arr","calculation","$e90b79a595231448$export$2e2bcd8739ae039","container","score1","score2","innerHTML","toString","scoreDiv","$7e78193218ebb0a2$export$2e2bcd8739ae039","createGame","overlay","player1Input","setAttribute","player2Input","validateButton","createTextNode","inputsContainer","sizeLabel","sizeInput","boardSize","value","p1_name","p2_name","style","display","ui_board","customElements","define","prototype","ui_infos"],"version":3,"file":"index.dc5e4f94.js.map"}