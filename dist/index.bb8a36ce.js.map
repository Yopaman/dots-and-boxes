{"mappings":"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","sources":["src/Board.ts","src/UI/UI_End.ts","src/UI/UI_Board.ts","src/Game.ts","src/UI/UI_Infos.ts","src/UI/UI_Creation.ts","src/index.ts"],"sourcesContent":["export interface Square {\n    owner: string | null,\n    linesOwners : {\n        top: string | null,\n        left: string | null,\n        right: string | null,\n        bottom: string | null\n    }\n}\n\nexport class Board {\n    board: Array<Array<Square>>\n    height: number\n    width: number\n\n    constructor(width: number, height: number) {\n        this.board = []\n        this.height = height\n        this.width = width\n        for (let i = 0; i < height; i++) {\n            let line: Array<Square> = []\n            for (let j = 0; j < width; j++) {\n                line.push({\n                    owner: null,\n                    linesOwners : {\n                        top: null,\n                        left: null,\n                        right: null,\n                        bottom: null\n                    }\n                })\n            }\n            this.board.push(line)\n        }\n    }\n\n    setSquareOwner(x: number, y: number, name: string) {\n        this.board[y][x].owner = name\n    }\n\n    setLineOwner(x: number, y: number, direction: string, name: string) {\n        switch (direction) {\n            case \"right\":\n                this.board[y][x].linesOwners.right = name\n                if (x < this.width - 1) this.board[y][x+1].linesOwners.left = name\n                break\n            case \"left\":\n                this.board[y][x].linesOwners.left = name\n                if (x > 0) this.board[y][x-1].linesOwners.right = name\n                break\n            case \"top\":\n                this.board[y][x].linesOwners.top = name\n                if (y > 0) this.board[y-1][x].linesOwners.bottom = name\n                break\n            case \"bottom\":\n                this.board[y][x].linesOwners.bottom = name\n                if (y < this.height - 1) this.board[y+1][x].linesOwners.top = name\n                break\n        }\n    }\n\n    printBoard() {\n        let str = \"\"\n        for (let i = 0; i < this.height; i++) {\n            for (let j = 0; j < this.width; j++) {\n                if (j == 0) {\n                    str += \"□ \"\n                } else {\n                    str += \" □ \"\n                }\n            }\n            str += \"\\n\"\n        }\n        console.log(str)\n    }\n}","import UI_Creation from \"./UI_Creation\"\n\nexport default class UI_End extends HTMLElement {\n\n    connectedCallback() {\n        const replayButton: HTMLButtonElement = document.querySelector(\".replay-button\")\n        replayButton.addEventListener(\"click\", () => {\n            this.replay()\n        })\n    }\n\n    constructor() {\n        super()\n\n        const overlay = document.createElement(\"div\")\n        overlay.classList.add(\"overlay\")\n\n        const container = document.createElement(\"div\")\n        container.classList.add(\"form-container\")\n\n        const endText = document.createElement(\"h1\")\n        endText.classList.add(\"end-text\")\n\n        const replayButton = document.createElement(\"button\")\n        replayButton.classList.add(\"replay-button\")\n        replayButton.appendChild(document.createTextNode(\"Rejouer\"))\n\n        container.appendChild(endText)\n        container.appendChild(replayButton)\n\n        overlay.appendChild(container)\n        this.appendChild(overlay)\n    }\n\n    setWinner(name: string | null) {\n        const endText = document.querySelector(\".end-text\")\n        if (name == null) {\n            endText.appendChild(document.createTextNode(\"Égalité\"))\n        } else {\n            endText.appendChild(document.createTextNode(\"Victoire de \" + name))\n        }\n    }\n\n    replay() {\n        const app = document.querySelector(\".app\")\n        const board = document.querySelector(\"game-board\")\n        const gameInfos = document.querySelector(\"game-infos\")\n        const gameCreation = document.querySelector(\"game-creation\")\n        app.removeChild(board)\n        app.removeChild(gameInfos)\n        app.removeChild(gameCreation)\n        \n        const newGame = document.createElement(\"game-creation\")\n        app.appendChild(newGame)\n        customElements.define(\"game-creation\", UI_Creation)\n    }\n\n}","import {Game} from \"../Game\"\nimport UI_Infos from \"./UI_Infos\"\nimport UI_End from \"./UI_End\"\n\nexport default class UI_Board extends HTMLElement {\n    game: Game\n\n    get board_height() {\n        if (this.hasAttribute(\"board-height\")) {\n            return parseInt(this.getAttribute(\"board-height\"))\n        } else {\n            return 10;\n        }\n    }\n\n    get board_width() {\n        if (this.hasAttribute(\"board-width\")) {\n            return parseInt(this.getAttribute(\"board-width\"))\n        } else {\n            return 10;\n        }\n    }\n\n    connectedCallback() {\n        const boxes = document.getElementsByTagName(\"td\") \n        for (let i = 0; i < boxes.length; i++) {\n            [\"left\", \"right\", \"top\", \"bottom\"].forEach(dir => {\n                const hitbox = boxes[i].querySelector(\".hitbox-\" + dir) \n                hitbox.addEventListener(\"mouseenter\", () => {\n                    this.interractLine(Array.from(boxes[i].parentNode.children).indexOf(boxes[i]), Array.from(boxes[i].parentNode.parentNode.children).indexOf(boxes[i].parentElement), dir, \"select\", this.game.players[this.game.currentPlayer].color)\n                })\n                hitbox.addEventListener(\"mouseleave\", () => {\n                    this.interractLine(Array.from(boxes[i].parentNode.children).indexOf(boxes[i]), Array.from(boxes[i].parentNode.parentNode.children).indexOf(boxes[i].parentElement), dir, \"reset\")\n                })\n                hitbox.addEventListener(\"click\", () => {\n                    const x = Array.from(boxes[i].parentNode.children).indexOf(boxes[i])\n                    const y = Array.from(boxes[i].parentNode.parentNode.children).indexOf(boxes[i].parentElement)\n                    const currentPlayer = this.game.players[this.game.currentPlayer]\n                    this.interractLine(x, y, dir, \"click\", currentPlayer.color)\n                    const xy = this.game.playTurn(x, y, dir)\n                    \n                    const infos: UI_Infos = document.querySelector(\"game-infos\")\n                    infos.updateScore()\n                    if (xy != []) {\n                        for (let k = 0; k < xy.length; k++) {\n                            this.setBgColor(xy[k][0], xy[k][1], currentPlayer.color)\n                        }\n                    }\n\n                    if (this.game.isGameFinished()) {\n                        const endScreen = document.createElement(\"end-screen\")\n                        document.querySelector(\"body\").appendChild(endScreen)\n                        customElements.define(\"end-screen\", UI_End)\n                        UI_End.prototype.setWinner(this.game.getWinner())\n                    }\n                    \n                })\n            })\n        }\n    }\n\n    constructor() {\n        super()\n\n        const body = document.createElement(\"tbody\")\n        for (let i = 0; i < this.board_height; i++) {\n            const line = document.createElement(\"tr\");\n            for (let j = 0; j < this.board_width; j++) {\n\n                // Create dot elements\n                const dot_top_right = document.createElement(\"span\")\n                dot_top_right.className = \"dot dot-top-right\"\n                const dot_top_left = document.createElement(\"span\")\n                dot_top_left.className = \" dot dot-top-left\"\n                const dot_bottom_right = document.createElement(\"span\")\n                dot_bottom_right.className = \"dot dot-bottom-right\"\n                const dot_bottom_left = document.createElement(\"span\")\n                dot_bottom_left.className = \"dot dot-bottom-left\"\n                \n                const square = document.createElement(\"td\")\n                square.className = \"square\"\n\n                // Append dot elements\n                square.appendChild(dot_top_left)\n                if (j == this.board_width - 1) {\n                    square.appendChild(dot_top_right)\n                }\n                if (i == this.board_height - 1) {\n                    square.appendChild(dot_bottom_left)\n                }\n                if ((i == this.board_height - 1) && (j == this.board_width - 1)) {\n                    square.appendChild(dot_bottom_right)\n                }\n\n                [\"left\", \"right\", \"top\", \"bottom\"].forEach(dir => {\n                    const hitbox = document.createElement(\"span\")\n                    hitbox.className = \"hitbox hitbox-\" + dir\n                    square.appendChild(hitbox)\n                })\n\n                line.appendChild(square)\n            }\n            body.appendChild(line)\n        }\n        const table = document.createElement(\"table\")\n        table.appendChild(body)\n        this.appendChild(table)\n    }\n\n    interractLine(x: number, y: number, direction: string, interractionType: string = \"select\", color: string = \"none\") {\n        const typeString = interractionType == \"select\" ? \"selected\" : \"clicked\"\n        const table: HTMLTableElement = this.getElementsByTagName(\"table\")[0]\n        const box = table.rows[y].cells[x]\n\n        if (interractionType == \"click\" && box.className.includes(\"selected-\" + direction)) {\n            box.classList.remove(\"selected-\" + direction)\n        }\n\n        if (!box.className.includes(\"clicked-\" + direction)) {\n            switch (direction) {\n                case \"right\":\n                    if ((x < this.board_width-1)) {\n                        const neighborBox = table.rows[y].cells[x+1]\n\n                        if (interractionType == \"click\" && neighborBox.className.includes(\"selected-left\")) {\n                            neighborBox.classList.remove(\"selected-left\")\n                        }\n\n                        interractionType == \"reset\" ? [\"selected\"].forEach(c => neighborBox.classList.remove(c + \"-left\")) :\n                        neighborBox.classList.add(typeString + \"-left\") \n\n                        if (interractionType == \"click\") {\n                            neighborBox.classList.add(color + \"-left\")\n                        }\n                    }\n                    interractionType == \"reset\" ? [\"selected\"].forEach(c => box.classList.remove(c + \"-right\")) :\n                    box.classList.add(typeString + \"-right\")\n                    break\n                case \"left\":\n                    if ((x > 0)) {\n                        const neighborBox = table.rows[y].cells[x-1]\n\n                        if (interractionType == \"click\" && neighborBox.className.includes(\"selected-right\")) {\n                            neighborBox.classList.remove(\"selected-right\")\n                        }\n\n                        interractionType == \"reset\" ? [\"selected\"].forEach(c => neighborBox.classList.remove(c + \"-right\")) :\n                        neighborBox.classList.add(typeString + \"-right\")\n\n                        if (interractionType == \"click\") {\n                            neighborBox.classList.add(color + \"-right\")\n                        }\n                    }\n                    interractionType == \"reset\" ? [\"selected\"].forEach(c => box.classList.remove(c + \"-left\")) :\n                    box.classList.add(typeString + \"-left\")\n                    break\n                case \"top\":\n                    if ((y > 0)) {\n                        const neighborBox = table.rows[y-1].cells[x]\n\n                        if (interractionType == \"click\" && neighborBox.className.includes(\"selected-bottom\")) {\n                            neighborBox.classList.remove(\"selected-bottom\")\n                        }\n\n                        interractionType == \"reset\" ? [\"selected\"].forEach(c => neighborBox.classList.remove(c + \"-bottom\")) :\n                        neighborBox.classList.add(typeString + \"-bottom\")\n\n                        if (interractionType == \"click\") {\n                            neighborBox.classList.add(color + \"-bottom\")\n                        }\n                    }\n                    interractionType == \"reset\" ? [\"selected\"].forEach(c => box.classList.remove(c + \"-top\")) :\n                    box.classList.add(typeString + \"-top\")\n                    break\n                case \"bottom\":\n                    if ((y < this.board_height-1)) {\n                        const neighborBox = table.rows[y+1].cells[x]\n\n                        if (interractionType == \"click\" && neighborBox.className.includes(\"selected-\")) {\n                            neighborBox.classList.remove(\"selected-top\")\n                        }\n\n                        interractionType == \"reset\" ? [\"selected\"].forEach(c => neighborBox.classList.remove(c + \"-top\")) :\n                        neighborBox.classList.add(typeString + \"-top\")\n\n                        if (interractionType == \"click\") {\n                            neighborBox.classList.add(color + \"-top\")\n                        }\n                    }\n                    interractionType == \"reset\" ? [\"selected\"].forEach(c => box.classList.remove(c + \"-bottom\")) :\n                    box.classList.add(typeString + \"-bottom\")\n                    break\n            }\n            if (interractionType == \"click\") {\n                box.classList.add(color + \"-\" + direction)\n            }\n        }\n    }\n\n    setBgColor(x: number, y: number, color: string) {\n        const table: HTMLTableElement = this.getElementsByTagName(\"table\")[0]\n        const box = table.rows[y].cells[x]\n        box.classList.add(\"background-\" + color)\n    }\n}\n\n","import { Board, Square } from \"./Board\";\n\nexport interface Player {\n    name: string,\n    score: number,\n    color: string\n}\n\nexport class Game {\n    board: Board\n    players: Array<Player>\n    currentPlayer: number\n\n    constructor(board: Board, ...players: string[]) {\n        this.board = board;\n        const colors = [\"blue\", \"red\"]\n        this.players = []\n        let i = 0\n        players.map(playerName => {\n            this.players.push({name: playerName, score: 0, color: colors[i]})\n            i++\n        })\n        this.currentPlayer = 0\n    }\n\n    playLine(x: number, y: number, direction: string, name: string) {\n        this.board.setLineOwner(x,y,direction,name)\n    }\n\n    nextPlayer() {\n        this.currentPlayer != this.players.length - 1 ? this.currentPlayer++ : this.currentPlayer = 0\n    }\n\n    isSquareFull(square: Square): boolean {\n        return ((square.linesOwners.left != null) &&\n        (square.linesOwners.top != null) &&\n        (square.linesOwners.right != null) &&\n        (square.linesOwners.bottom != null))\n    }\n\n    isGameFinished() {\n        const boxesCount = this.board.width * this.board.height\n        let filledBoxesCount = 0\n        for (let y = 0; y < this.board.height; y++) {\n            for (let x = 0; x < this.board.width; x++) {\n                if (this.board.board[y][x].owner != null) {\n                    filledBoxesCount++\n                } else {\n                    return false\n                }\n            }\n        }\n        return filledBoxesCount == boxesCount\n    }\n\n    getWinner(): string | null {\n        if (this.players[0].score > this.players[1].score) {\n            return this.players[0].name\n        } else if (this.players[1].score > this.players[0].score) {\n            return this.players[1].name\n        } else {\n            return null\n        }\n    }\n\n    calculateBoxes() {\n        let turnScore = 0\n        let xy_arr = []\n        for (let y = 0; y < this.board.height; y++) {\n            for (let x = 0; x < this.board.width; x++) {\n                if (this.board.board[y][x].owner == null) {\n                    if (this.isSquareFull(this.board.board[y][x])) {\n                        this.board.board[y][x].owner = this.players[this.currentPlayer].name\n                        turnScore++\n                        xy_arr.push([x,y])\n                    }\n                }\n            }\n        }\n        return {score: turnScore, xy: xy_arr}\n    }\n\n    playTurn(x: number, y: number, direction: string) {\n        this.playLine(x, y, direction, this.players[this.currentPlayer].name)\n        let calculation = this.calculateBoxes()\n        let turnScore: number = calculation.score\n        if (turnScore <= 0) {\n            this.nextPlayer()\n        } else {\n            this.players[this.currentPlayer].score += turnScore\n        }\n        return calculation.xy\n    }\n}","import {Game, Player} from \"../Game\"\n\nexport default class UI_Infos extends HTMLElement {\n    game: Game\n\n    constructor() {\n        super()\n        const container = document.createElement(\"div\")\n        container.classList.add(\"game-infos-container\")\n        const score1 = document.createElement(\"span\")\n        const score2 = document.createElement(\"span\")\n        score1.classList.add(\"score-1\")\n        score2.classList.add(\"score-2\")\n        score1.innerHTML = this.game.players[0].name + \" : \" + this.game.players[0].score.toString()\n        score2.innerHTML = this.game.players[1].name + \" : \" + this.game.players[1].score.toString()\n\n        const scoreDiv = document.createElement(\"div\")\n        scoreDiv.classList.add(\"scores\")\n        scoreDiv.appendChild(score1)\n        scoreDiv.appendChild(score2)\n        container.appendChild(scoreDiv)\n\n        const currentPlayer = document.createElement(\"span\")\n        currentPlayer.classList.add(\"current-player\")\n        currentPlayer.innerHTML = \"Au tour de \" + this.game.players[this.game.currentPlayer].name + \" de jouer\"\n        container.appendChild(currentPlayer)\n\n        this.appendChild(container)\n    }\n\n    updateScore() {\n        const score1: HTMLSpanElement = document.querySelector(\".score-1\")\n        const score2: HTMLSpanElement = document.querySelector(\".score-2\")\n        const currentPlayer: HTMLSpanElement = document.querySelector(\".current-player\")\n\n        score1.innerHTML = this.game.players[0].name + \" : \" + this.game.players[0].score\n        score2.innerHTML = this.game.players[1].name + \" : \" + this.game.players[1].score\n        currentPlayer.innerHTML = \"Au tour de \" + this.game.players[this.game.currentPlayer].name + \" de jouer\"\n    }\n}","import {Board} from \"../Board\";\nimport UI_Board from \"./UI_Board\";\nimport {Game} from \"../Game\";\nimport UI_Infos from \"./UI_Infos\";\n\nexport default class UI_Creation extends HTMLElement {\n\n    connectedCallback() {\n        const submitButton: HTMLButtonElement = document.querySelector(\".validate-button\")\n        submitButton.addEventListener(\"click\", () => {\n            this.createGame()\n        })\n    }\n\n    constructor() {\n        super()\n\n        const overlay = document.createElement(\"div\")\n        overlay.classList.add(\"overlay\")\n\n        const container = document.createElement(\"div\")\n        container.classList.add(\"form-container\")\n\n        const player1Input = document.createElement(\"input\")\n        player1Input.classList.add(\"player1-input\")\n        player1Input.setAttribute(\"value\", \"Joueur 1\")\n        const player2Input = document.createElement(\"input\")\n        player2Input.classList.add(\"player2-input\")\n        player2Input.setAttribute(\"value\", \"Joueur 2\")\n\n        const validateButton = document.createElement(\"button\")\n        validateButton.classList.add(\"validate-button\")\n        validateButton.appendChild(document.createTextNode(\"Valider\"))\n\n        const inputsContainer = document.createElement(\"div\")\n        inputsContainer.classList.add(\"inputs-container\")\n        inputsContainer.appendChild(player1Input)\n        inputsContainer.appendChild(player2Input)\n\n        const sizeLabel = document.createElement(\"label\")\n        sizeLabel.appendChild(document.createTextNode(\"Taille de la grille :\"))\n        const sizeInput = document.createElement(\"input\")\n        sizeInput.classList.add(\"size-input\")\n        sizeInput.setAttribute(\"type\", \"number\")\n        sizeInput.setAttribute(\"value\", \"5\")\n        sizeInput.setAttribute(\"min\", \"4\")\n        sizeInput.setAttribute(\"max\", \"20\")\n\n        container.appendChild(inputsContainer)\n        container.appendChild(sizeLabel)\n        container.appendChild(sizeInput)\n        container.appendChild(validateButton)\n\n\n        overlay.appendChild(container)\n        this.appendChild(overlay)\n    }\n\n    createGame() {\n        const sizeInput: HTMLInputElement = document.querySelector(\".size-input\")\n        const boardSize = parseInt(sizeInput.value)\n        const board = new Board(boardSize, boardSize)\n\n        const player1: HTMLInputElement = document.querySelector(\".player1-input\")\n        const p1_name = player1.value\n        const player2: HTMLInputElement = document.querySelector(\".player2-input\")\n        const p2_name = player2.value\n\n        const overlay: HTMLDivElement = document.querySelector(\".overlay\")\n        overlay.style.display = \"none\"\n\n        const ui_board = document.createElement(\"game-board\")\n        ui_board.setAttribute(\"board-width\", boardSize.toString())\n        ui_board.setAttribute(\"board-height\", boardSize.toString())\n        document.querySelector(\".app\").appendChild(ui_board)\n        customElements.define(\"game-board\", UI_Board)\n\n        const game = new Game(board, p1_name, p2_name);\n        UI_Board.prototype.game = game;\n\n        UI_Infos.prototype.game = game;\n\n        const ui_infos = document.createElement(\"game-infos\")\n        customElements.define(\"game-infos\", UI_Infos)\n        document.querySelector(\".app\").appendChild(ui_infos)\n        \n    }\n}","import UI_Creation from \"./UI/UI_Creation\"\n\ncustomElements.define(\"game-creation\", UI_Creation)\n"],"names":["$bcd369778f872d1f$export$dc537a3a3893548e","constructor","width","height","this","board","i","line","j","push","owner","linesOwners","top","left","right","bottom","setSquareOwner","x","y","name","setLineOwner","direction","printBoard","str","console","log","$06eff6019c405e82$export$2e2bcd8739ae039","HTMLElement","connectedCallback","document","querySelector","addEventListener","replay","super","overlay","createElement","classList","add","container","endText","replayButton","appendChild","createTextNode","setWinner","app","gameInfos","gameCreation","removeChild","newGame","customElements","define","$7e78193218ebb0a2$export$2e2bcd8739ae039","$d759c8766534d048$export$2e2bcd8739ae039","board_height","hasAttribute","parseInt","getAttribute","board_width","boxes","getElementsByTagName","length","forEach","dir","hitbox","interractLine","Array","from","parentNode","children","indexOf","parentElement","game","players","currentPlayer","color","xy","playTurn","updateScore","k","setBgColor","isGameFinished","endScreen","prototype","getWinner","body","dot_top_right","className","dot_top_left","dot_bottom_right","dot_bottom_left","square","table","interractionType","typeString","box","rows","cells","includes","remove","neighborBox","c","$7b066675d1aa79fa$export$985739bfa5723e08","colors","map","playerName","score","playLine","nextPlayer","isSquareFull","boxesCount","filledBoxesCount","calculateBoxes","turnScore","xy_arr","calculation","$e90b79a595231448$export$2e2bcd8739ae039","score1","score2","innerHTML","toString","scoreDiv","createGame","player1Input","setAttribute","player2Input","validateButton","inputsContainer","sizeLabel","sizeInput","boardSize","value","p1_name","p2_name","style","display","ui_board","ui_infos"],"version":3,"file":"index.bb8a36ce.js.map"}