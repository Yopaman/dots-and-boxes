{"mappings":"AAUO,MAAMA,EAKTC,YAAYC,EAAeC,GACvBC,KAAKC,MAAQ,GACbD,KAAKD,OAASA,EACdC,KAAKF,MAAQA,EACb,IAAK,IAAII,EAAI,EAAGA,EAAIH,EAAQG,IAAK,CAC7B,IAAIC,EAAsB,GAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAOM,IACvBD,EAAKE,KAAK,CACNC,MAAO,KACPC,YAAc,CACVC,IAAK,KACLC,KAAM,KACNC,MAAO,KACPC,OAAQ,QAIpBX,KAAKC,MAAMI,KAAKF,IAIxBS,eAAeC,EAAWC,EAAWC,GACjCf,KAAKC,MAAMa,GAAGD,GAAGP,MAAQS,EAG7BC,aAAaH,EAAWC,EAAWG,EAAmBF,GAClD,OAAQE,GACJ,IAAK,QACDjB,KAAKC,MAAMa,GAAGD,GAAGN,YAAYG,MAAQK,EACjCF,EAAIb,KAAKF,MAAQ,IAAGE,KAAKC,MAAMa,GAAGD,EAAE,GAAGN,YAAYE,KAAOM,GAC9D,MACJ,IAAK,OACDf,KAAKC,MAAMa,GAAGD,GAAGN,YAAYE,KAAOM,EAChCF,EAAI,IAAGb,KAAKC,MAAMa,GAAGD,EAAE,GAAGN,YAAYG,MAAQK,GAClD,MACJ,IAAK,MACDf,KAAKC,MAAMa,GAAGD,GAAGN,YAAYC,IAAMO,EAC/BD,EAAI,IAAGd,KAAKC,MAAMa,EAAE,GAAGD,GAAGN,YAAYI,OAASI,GACnD,MACJ,IAAK,SACDf,KAAKC,MAAMa,GAAGD,GAAGN,YAAYI,OAASI,EAClCD,EAAId,KAAKD,OAAS,IAAGC,KAAKC,MAAMa,EAAE,GAAGD,GAAGN,YAAYC,IAAMO,IAK1EG,aACI,IAAIC,EAAM,GACV,IAAK,IAAIjB,EAAI,EAAGA,EAAIF,KAAKD,OAAQG,IAAK,CAClC,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,KAAKF,MAAOM,IAExBe,GADK,GAALf,EACO,KAEA,MAGfe,GAAO,KAEXC,QAAQC,IAAIF,ICpEL,MAAAG,UAAqBC,YAEhCC,oBAC4CC,SAASC,cAAc,kBAClDC,iBAAiB,SAAS,SAK3C9B,cACI+B,QAEA,MAAMC,EAAUJ,SAASK,cAAc,OACvCD,EAAQE,UAAUC,IAAI,WAEtB,MAAMC,EAAYR,SAASK,cAAc,OACzCG,EAAUF,UAAUC,IAAI,kBAExB,MAAME,EAAUT,SAASK,cAAc,MACvCI,EAAQH,UAAUC,IAAI,YAEtB,MAAMG,EAAeV,SAASK,cAAc,UAC5CK,EAAaJ,UAAUC,IAAI,iBAC3BG,EAAaC,YAAYX,SAASY,eAAe,YAEjDJ,EAAUG,YAAYF,GACtBD,EAAUG,YAAYD,GAEtBN,EAAQO,YAAYH,GACpBjC,KAAKoC,YAAYP,GAGrBS,UAAUvB,GACN,MAAMmB,EAAUT,SAASC,cAAc,aAC3B,MAARX,EACAmB,EAAQE,YAAYX,SAASY,eAAe,YAE5CH,EAAQE,YAAYX,SAASY,eAAe,eAAiBtB,KCtC1D,MAAAwB,UAAuBhB,YAG9BiB,mBACA,OAAIxC,KAAKyC,aAAa,gBACXC,SAAS1C,KAAK2C,aAAa,iBAE3B,GAIXC,kBACA,OAAI5C,KAAKyC,aAAa,eACXC,SAAS1C,KAAK2C,aAAa,gBAE3B,GAIfnB,oBACI,MAAMqB,EAAQpB,SAASqB,qBAAqB,MAC5C,IAAK,IAAI5C,EAAI,EAAGA,EAAI2C,EAAME,OAAQ7C,IAC9B,CAAC,OAAQ,QAAS,MAAO,UAAU8C,SAAQC,IACvC,MAAMC,EAASL,EAAM3C,GAAGwB,cAAc,WAAauB,GACnDC,EAAOvB,iBAAiB,cAAc,KAClC3B,KAAKmD,cAAcC,MAAMC,KAAKR,EAAM3C,GAAGoD,WAAWC,UAAUC,QAAQX,EAAM3C,IAAKkD,MAAMC,KAAKR,EAAM3C,GAAGoD,WAAWA,WAAWC,UAAUC,QAAQX,EAAM3C,GAAGuD,eAAgBR,EAAK,SAAUjD,KAAK0D,KAAKC,QAAQ3D,KAAK0D,KAAKE,eAAeC,UAElOX,EAAOvB,iBAAiB,cAAc,KAClC3B,KAAKmD,cAAcC,MAAMC,KAAKR,EAAM3C,GAAGoD,WAAWC,UAAUC,QAAQX,EAAM3C,IAAKkD,MAAMC,KAAKR,EAAM3C,GAAGoD,WAAWA,WAAWC,UAAUC,QAAQX,EAAM3C,GAAGuD,eAAgBR,EAAK,YAE7KC,EAAOvB,iBAAiB,SAAS,KAC7B,MAAMd,EAAIuC,MAAMC,KAAKR,EAAM3C,GAAGoD,WAAWC,UAAUC,QAAQX,EAAM3C,IAC3DY,EAAIsC,MAAMC,KAAKR,EAAM3C,GAAGoD,WAAWA,WAAWC,UAAUC,QAAQX,EAAM3C,GAAGuD,eACzEG,EAAgB5D,KAAK0D,KAAKC,QAAQ3D,KAAK0D,KAAKE,eAClD5D,KAAKmD,cAActC,EAAGC,EAAGmC,EAAK,QAASW,EAAcC,OACrD,MAAMC,EAAK9D,KAAK0D,KAAKK,SAASlD,EAAGC,EAAGmC,GAIpC,GAFwBxB,SAASC,cAAc,cACzCsC,cACFF,GAAM,GACN,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAGf,OAAQkB,IAC3BjE,KAAKkE,WAAWJ,EAAGG,GAAG,GAAIH,EAAGG,GAAG,GAAIL,EAAcC,OAI1D,GAAI7D,KAAK0D,KAAKS,iBAAkB,CAC5B,MAAMC,EAAY3C,SAASK,cAAc,cACzCL,SAASC,cAAc,QAAQU,YAAYgC,GAC3CC,eAAeC,OAAO,aAAchD,GACpCA,EAAOiD,UAAUjC,UAAUtC,KAAK0D,KAAKc,oBAQzD3E,cACI+B,QAEA,MAAM6C,EAAOhD,SAASK,cAAc,SACpC,IAAK,IAAI5B,EAAI,EAAGA,EAAIF,KAAKwC,aAActC,IAAK,CACxC,MAAMC,EAAOsB,SAASK,cAAc,MACpC,IAAK,IAAI1B,EAAI,EAAGA,EAAIJ,KAAK4C,YAAaxC,IAAK,CAGvC,MAAMsE,EAAgBjD,SAASK,cAAc,QAC7C4C,EAAcC,UAAY,oBAC1B,MAAMC,EAAenD,SAASK,cAAc,QAC5C8C,EAAaD,UAAY,oBACzB,MAAME,EAAmBpD,SAASK,cAAc,QAChD+C,EAAiBF,UAAY,uBAC7B,MAAMG,EAAkBrD,SAASK,cAAc,QAC/CgD,EAAgBH,UAAY,sBAE5B,MAAMI,EAAStD,SAASK,cAAc,MACtCiD,EAAOJ,UAAY,SAGnBI,EAAO3C,YAAYwC,GACfxE,GAAKJ,KAAK4C,YAAc,GACxBmC,EAAO3C,YAAYsC,GAEnBxE,GAAKF,KAAKwC,aAAe,GACzBuC,EAAO3C,YAAY0C,GAElB5E,GAAKF,KAAKwC,aAAe,GAAOpC,GAAKJ,KAAK4C,YAAc,GACzDmC,EAAO3C,YAAYyC,GAGvB,CAAC,OAAQ,QAAS,MAAO,UAAU7B,SAAQC,IACvC,MAAMC,EAASzB,SAASK,cAAc,QACtCoB,EAAOyB,UAAY,iBAAmB1B,EACtC8B,EAAO3C,YAAYc,MAGvB/C,EAAKiC,YAAY2C,GAErBN,EAAKrC,YAAYjC,GAErB,MAAM6E,EAAQvD,SAASK,cAAc,SACrCkD,EAAM5C,YAAYqC,GAClBzE,KAAKoC,YAAY4C,GAGrB7B,cAActC,EAAWC,EAAWG,EAAmBgE,EAA2B,SAAUpB,EAAgB,QACxG,MAAMqB,EAAiC,UAApBD,EAA+B,WAAa,UACzDD,EAA0BhF,KAAK8C,qBAAqB,SAAS,GAC7DqC,EAAMH,EAAMI,KAAKtE,GAAGuE,MAAMxE,GAMhC,GAJwB,SAApBoE,GAA+BE,EAAIR,UAAUW,SAAS,YAAcrE,IACpEkE,EAAIpD,UAAUwD,OAAO,YAActE,IAGlCkE,EAAIR,UAAUW,SAAS,WAAarE,GAAY,CACjD,OAAQA,GACJ,IAAK,QACD,GAAKJ,EAAIb,KAAK4C,YAAY,EAAI,CAC1B,MAAM4C,EAAcR,EAAMI,KAAKtE,GAAGuE,MAAMxE,EAAE,GAElB,SAApBoE,GAA+BO,EAAYb,UAAUW,SAAS,kBAC9DE,EAAYzD,UAAUwD,OAAO,iBAGb,SAApBN,EAA8B,CAAC,YAAYjC,SAAQyC,GAAKD,EAAYzD,UAAUwD,OAAOE,EAAI,WACzFD,EAAYzD,UAAUC,IAAIkD,EAAa,SAEf,SAApBD,GACAO,EAAYzD,UAAUC,IAAI6B,EAAQ,SAGtB,SAApBoB,EAA8B,CAAC,YAAYjC,SAAQyC,GAAKN,EAAIpD,UAAUwD,OAAOE,EAAI,YACjFN,EAAIpD,UAAUC,IAAIkD,EAAa,UAC/B,MACJ,IAAK,OACD,GAAKrE,EAAI,EAAI,CACT,MAAM2E,EAAcR,EAAMI,KAAKtE,GAAGuE,MAAMxE,EAAE,GAElB,SAApBoE,GAA+BO,EAAYb,UAAUW,SAAS,mBAC9DE,EAAYzD,UAAUwD,OAAO,kBAGb,SAApBN,EAA8B,CAAC,YAAYjC,SAAQyC,GAAKD,EAAYzD,UAAUwD,OAAOE,EAAI,YACzFD,EAAYzD,UAAUC,IAAIkD,EAAa,UAEf,SAApBD,GACAO,EAAYzD,UAAUC,IAAI6B,EAAQ,UAGtB,SAApBoB,EAA8B,CAAC,YAAYjC,SAAQyC,GAAKN,EAAIpD,UAAUwD,OAAOE,EAAI,WACjFN,EAAIpD,UAAUC,IAAIkD,EAAa,SAC/B,MACJ,IAAK,MACD,GAAKpE,EAAI,EAAI,CACT,MAAM0E,EAAcR,EAAMI,KAAKtE,EAAE,GAAGuE,MAAMxE,GAElB,SAApBoE,GAA+BO,EAAYb,UAAUW,SAAS,oBAC9DE,EAAYzD,UAAUwD,OAAO,mBAGb,SAApBN,EAA8B,CAAC,YAAYjC,SAAQyC,GAAKD,EAAYzD,UAAUwD,OAAOE,EAAI,aACzFD,EAAYzD,UAAUC,IAAIkD,EAAa,WAEf,SAApBD,GACAO,EAAYzD,UAAUC,IAAI6B,EAAQ,WAGtB,SAApBoB,EAA8B,CAAC,YAAYjC,SAAQyC,GAAKN,EAAIpD,UAAUwD,OAAOE,EAAI,UACjFN,EAAIpD,UAAUC,IAAIkD,EAAa,QAC/B,MACJ,IAAK,SACD,GAAKpE,EAAId,KAAKwC,aAAa,EAAI,CAC3B,MAAMgD,EAAcR,EAAMI,KAAKtE,EAAE,GAAGuE,MAAMxE,GAElB,SAApBoE,GAA+BO,EAAYb,UAAUW,SAAS,cAC9DE,EAAYzD,UAAUwD,OAAO,gBAGb,SAApBN,EAA8B,CAAC,YAAYjC,SAAQyC,GAAKD,EAAYzD,UAAUwD,OAAOE,EAAI,UACzFD,EAAYzD,UAAUC,IAAIkD,EAAa,QAEf,SAApBD,GACAO,EAAYzD,UAAUC,IAAI6B,EAAQ,QAGtB,SAApBoB,EAA8B,CAAC,YAAYjC,SAAQyC,GAAKN,EAAIpD,UAAUwD,OAAOE,EAAI,aACjFN,EAAIpD,UAAUC,IAAIkD,EAAa,WAGf,SAApBD,GACAE,EAAIpD,UAAUC,IAAI6B,EAAQ,IAAM5C,IAK5CiD,WAAWrD,EAAWC,EAAW+C,GACG7D,KAAK8C,qBAAqB,SAAS,GACjDsC,KAAKtE,GAAGuE,MAAMxE,GAC5BkB,UAAUC,IAAI,cAAgB6B,IClMnC,MAAM6B,EAKT7F,YAAYI,KAAiB0D,GACzB3D,KAAKC,MAAQA,EACb,MAAM0F,EAAS,CAAC,OAAQ,OACxB3F,KAAK2D,QAAU,GACf,IAAIzD,EAAI,EACRyD,EAAQiC,KAAIC,IACR7F,KAAK2D,QAAQtD,KAAK,CAACU,KAAM8E,EAAYC,MAAO,EAAGjC,MAAO8B,EAAOzF,KAC7DA,OAEJF,KAAK4D,cAAgB,EAGzBmC,SAASlF,EAAWC,EAAWG,EAAmBF,GAC9Cf,KAAKC,MAAMe,aAAaH,EAAEC,EAAEG,EAAUF,GAG1CiF,aACIhG,KAAK4D,eAAiB5D,KAAK2D,QAAQZ,OAAS,EAAI/C,KAAK4D,gBAAkB5D,KAAK4D,cAAgB,EAGhGqC,aAAalB,GACT,OAAoC,MAA3BA,EAAOxE,YAAYE,MACD,MAA1BsE,EAAOxE,YAAYC,KACS,MAA5BuE,EAAOxE,YAAYG,OACU,MAA7BqE,EAAOxE,YAAYI,OAGxBwD,iBACI,MAAM+B,EAAalG,KAAKC,MAAMH,MAAQE,KAAKC,MAAMF,OACjD,IAAIoG,EAAmB,EACvB,IAAK,IAAIrF,EAAI,EAAGA,EAAId,KAAKC,MAAMF,OAAQe,IACnC,IAAK,IAAID,EAAI,EAAGA,EAAIb,KAAKC,MAAMH,MAAOe,IAAK,CACvC,GAAoC,MAAhCb,KAAKC,MAAMA,MAAMa,GAAGD,GAAGP,MAGvB,OAAO,EAFP6F,IAMZ,OAAOA,GAAoBD,EAG/B1B,YACI,OAAIxE,KAAK2D,QAAQ,GAAGmC,MAAQ9F,KAAK2D,QAAQ,GAAGmC,MACjC9F,KAAK2D,QAAQ,GAAG5C,KAChBf,KAAK2D,QAAQ,GAAGmC,MAAQ9F,KAAK2D,QAAQ,GAAGmC,MACxC9F,KAAK2D,QAAQ,GAAG5C,KAEhB,KAIfqF,iBACI,IAAIC,EAAY,EACZC,EAAS,GACb,IAAK,IAAIxF,EAAI,EAAGA,EAAId,KAAKC,MAAMF,OAAQe,IACnC,IAAK,IAAID,EAAI,EAAGA,EAAIb,KAAKC,MAAMH,MAAOe,IACE,MAAhCb,KAAKC,MAAMA,MAAMa,GAAGD,GAAGP,OACnBN,KAAKiG,aAAajG,KAAKC,MAAMA,MAAMa,GAAGD,MACtCb,KAAKC,MAAMA,MAAMa,GAAGD,GAAGP,MAAQN,KAAK2D,QAAQ3D,KAAK4D,eAAe7C,KAChEsF,IACAC,EAAOjG,KAAK,CAACQ,EAAEC,KAK/B,MAAO,CAACgF,MAAOO,EAAWvC,GAAIwC,GAGlCvC,SAASlD,EAAWC,EAAWG,GAC3BjB,KAAK+F,SAASlF,EAAGC,EAAGG,EAAWjB,KAAK2D,QAAQ3D,KAAK4D,eAAe7C,MAChE,IAAIwF,EAAcvG,KAAKoG,iBACnBC,EAAoBE,EAAYT,MAMpC,OALIO,GAAa,EACbrG,KAAKgG,aAELhG,KAAK2D,QAAQ3D,KAAK4D,eAAekC,OAASO,EAEvCE,EAAYzC,ICzFZ,MAAA0C,UAAuBjF,YAGlC1B,cACI+B,QACA,MAAMK,EAAYR,SAASK,cAAc,OACzCG,EAAUF,UAAUC,IAAI,wBACxB,MAAMyE,EAAShF,SAASK,cAAc,QAChC4E,EAASjF,SAASK,cAAc,QACtC2E,EAAO1E,UAAUC,IAAI,WACrB0E,EAAO3E,UAAUC,IAAI,WACrByE,EAAOE,UAAY3G,KAAK0D,KAAKC,QAAQ,GAAG5C,KAAO,MAAQf,KAAK0D,KAAKC,QAAQ,GAAGmC,MAAMc,WAClFF,EAAOC,UAAY3G,KAAK0D,KAAKC,QAAQ,GAAG5C,KAAO,MAAQf,KAAK0D,KAAKC,QAAQ,GAAGmC,MAAMc,WAElF,MAAMC,EAAWpF,SAASK,cAAc,OACxC+E,EAAS9E,UAAUC,IAAI,UACvB6E,EAASzE,YAAYqE,GACrBI,EAASzE,YAAYsE,GACrBzE,EAAUG,YAAYyE,GAEtB,MAAMjD,EAAgBnC,SAASK,cAAc,QAC7C8B,EAAc7B,UAAUC,IAAI,kBAC5B4B,EAAc+C,UAAY,cAAgB3G,KAAK0D,KAAKC,QAAQ3D,KAAK0D,KAAKE,eAAe7C,KAAO,YAC5FkB,EAAUG,YAAYwB,GAEtB5D,KAAKoC,YAAYH,GAGrB+B,cACI,MAAMyC,EAA0BhF,SAASC,cAAc,YACjDgF,EAA0BjF,SAASC,cAAc,YACjDkC,EAAiCnC,SAASC,cAAc,mBAE9D+E,EAAOE,UAAY3G,KAAK0D,KAAKC,QAAQ,GAAG5C,KAAO,MAAQf,KAAK0D,KAAKC,QAAQ,GAAGmC,MAC5EY,EAAOC,UAAY3G,KAAK0D,KAAKC,QAAQ,GAAG5C,KAAO,MAAQf,KAAK0D,KAAKC,QAAQ,GAAGmC,MAC5ElC,EAAc+C,UAAY,cAAgB3G,KAAK0D,KAAKC,QAAQ3D,KAAK0D,KAAKE,eAAe7C,KAAO,aChCrF,MAAA+F,UAA0BvF,YAErCC,oBAC4CC,SAASC,cAAc,oBAClDC,iBAAiB,SAAS,KACnC3B,KAAK+G,gBAIblH,cACI+B,QAEA,MAAMC,EAAUJ,SAASK,cAAc,OACvCD,EAAQE,UAAUC,IAAI,WAEtB,MAAMC,EAAYR,SAASK,cAAc,OACzCG,EAAUF,UAAUC,IAAI,kBAExB,MAAMgF,EAAevF,SAASK,cAAc,SAC5CkF,EAAajF,UAAUC,IAAI,iBAC3BgF,EAAaC,aAAa,QAAS,YACnC,MAAMC,EAAezF,SAASK,cAAc,SAC5CoF,EAAanF,UAAUC,IAAI,iBAC3BkF,EAAaD,aAAa,QAAS,YAEnC,MAAME,EAAiB1F,SAASK,cAAc,UAC9CqF,EAAepF,UAAUC,IAAI,mBAC7BmF,EAAe/E,YAAYX,SAASY,eAAe,YAEnD,MAAM+E,EAAkB3F,SAASK,cAAc,OAC/CsF,EAAgBrF,UAAUC,IAAI,oBAC9BoF,EAAgBhF,YAAY4E,GAC5BI,EAAgBhF,YAAY8E,GAE5B,MAAMG,EAAY5F,SAASK,cAAc,SACzCuF,EAAUjF,YAAYX,SAASY,eAAe,0BAC9C,MAAMiF,EAAY7F,SAASK,cAAc,SACzCwF,EAAUvF,UAAUC,IAAI,cACxBsF,EAAUL,aAAa,OAAQ,UAC/BK,EAAUL,aAAa,QAAS,KAChCK,EAAUL,aAAa,MAAO,KAC9BK,EAAUL,aAAa,MAAO,MAE9BhF,EAAUG,YAAYgF,GACtBnF,EAAUG,YAAYiF,GACtBpF,EAAUG,YAAYkF,GACtBrF,EAAUG,YAAY+E,GAGtBtF,EAAQO,YAAYH,GACpBjC,KAAKoC,YAAYP,GAGrBkF,aACI,MAAMO,EAA8B7F,SAASC,cAAc,eACrD6F,EAAY7E,SAAS4E,EAAUE,OAC/BvH,EAAQ,IAAIL,EAAM2H,EAAWA,GAG7BE,EAD4BhG,SAASC,cAAc,kBACjC8F,MAElBE,EAD4BjG,SAASC,cAAc,kBACjC8F,MAEQ/F,SAASC,cAAc,YAC/CiG,MAAMC,QAAU,OAExB,MAAMC,EAAWpG,SAASK,cAAc,cACxC+F,EAASZ,aAAa,cAAeM,EAAUX,YAC/CiB,EAASZ,aAAa,eAAgBM,EAAUX,YAChDnF,SAASC,cAAc,QAAQU,YAAYyF,GAC3CxD,eAAeC,OAAO,aAAc/B,GAEpC,MAAMmB,EAAO,IAAIgC,EAAKzF,EAAOwH,EAASC,GACtCnF,EAASgC,UAAUb,KAAOA,EAE1B8C,EAASjC,UAAUb,KAAOA,EAE1B,MAAMoE,EAAWrG,SAASK,cAAc,cACxCuC,eAAeC,OAAO,aAAckC,GACpC/E,SAASC,cAAc,QAAQU,YAAY0F,IClFnDzD,eAAeC,OAAO,gBAAiBwC","sources":["src/Board.ts","src/UI/UI_End.ts","src/UI/UI_Board.ts","src/Game.ts","src/UI/UI_Infos.ts","src/UI/UI_Creation.ts","src/index.ts"],"sourcesContent":["export interface Square {\n    owner: string | null,\n    linesOwners : {\n        top: string | null,\n        left: string | null,\n        right: string | null,\n        bottom: string | null\n    }\n}\n\nexport class Board {\n    board: Array<Array<Square>>\n    height: number\n    width: number\n\n    constructor(width: number, height: number) {\n        this.board = []\n        this.height = height\n        this.width = width\n        for (let i = 0; i < height; i++) {\n            let line: Array<Square> = []\n            for (let j = 0; j < width; j++) {\n                line.push({\n                    owner: null,\n                    linesOwners : {\n                        top: null,\n                        left: null,\n                        right: null,\n                        bottom: null\n                    }\n                })\n            }\n            this.board.push(line)\n        }\n    }\n\n    setSquareOwner(x: number, y: number, name: string) {\n        this.board[y][x].owner = name\n    }\n\n    setLineOwner(x: number, y: number, direction: string, name: string) {\n        switch (direction) {\n            case \"right\":\n                this.board[y][x].linesOwners.right = name\n                if (x < this.width - 1) this.board[y][x+1].linesOwners.left = name\n                break\n            case \"left\":\n                this.board[y][x].linesOwners.left = name\n                if (x > 0) this.board[y][x-1].linesOwners.right = name\n                break\n            case \"top\":\n                this.board[y][x].linesOwners.top = name\n                if (y > 0) this.board[y-1][x].linesOwners.bottom = name\n                break\n            case \"bottom\":\n                this.board[y][x].linesOwners.bottom = name\n                if (y < this.height - 1) this.board[y+1][x].linesOwners.top = name\n                break\n        }\n    }\n\n    printBoard() {\n        let str = \"\"\n        for (let i = 0; i < this.height; i++) {\n            for (let j = 0; j < this.width; j++) {\n                if (j == 0) {\n                    str += \"□ \"\n                } else {\n                    str += \" □ \"\n                }\n            }\n            str += \"\\n\"\n        }\n        console.log(str)\n    }\n}","import {Board} from \"../Board\";\nimport UI_Board from \"./UI_Board\";\nimport {Game} from \"../Game\";\nimport UI_Infos from \"./UI_Infos\";\n\nexport default class UI_End extends HTMLElement {\n\n    connectedCallback() {\n        const replayButton: HTMLButtonElement = document.querySelector(\".replay-button\")\n        replayButton.addEventListener(\"click\", () => {\n\n        })\n    }\n\n    constructor() {\n        super()\n\n        const overlay = document.createElement(\"div\")\n        overlay.classList.add(\"overlay\")\n\n        const container = document.createElement(\"div\")\n        container.classList.add(\"form-container\")\n\n        const endText = document.createElement(\"h1\")\n        endText.classList.add(\"end-text\")\n\n        const replayButton = document.createElement(\"button\")\n        replayButton.classList.add(\"replay-button\")\n        replayButton.appendChild(document.createTextNode(\"Rejouer\"))\n\n        container.appendChild(endText)\n        container.appendChild(replayButton)\n\n        overlay.appendChild(container)\n        this.appendChild(overlay)\n    }\n\n    setWinner(name: string | null) {\n        const endText = document.querySelector(\".end-text\")\n        if (name == null) {\n            endText.appendChild(document.createTextNode(\"Égalité\"))\n        } else {\n            endText.appendChild(document.createTextNode(\"Victoire de \" + name))\n        }\n    }\n}","import {Game} from \"../Game\"\nimport UI_Infos from \"./UI_Infos\"\nimport UI_End from \"./UI_End\"\n\nexport default class UI_Board extends HTMLElement {\n    game: Game\n\n    get board_height() {\n        if (this.hasAttribute(\"board-height\")) {\n            return parseInt(this.getAttribute(\"board-height\"))\n        } else {\n            return 10;\n        }\n    }\n\n    get board_width() {\n        if (this.hasAttribute(\"board-width\")) {\n            return parseInt(this.getAttribute(\"board-width\"))\n        } else {\n            return 10;\n        }\n    }\n\n    connectedCallback() {\n        const boxes = document.getElementsByTagName(\"td\") \n        for (let i = 0; i < boxes.length; i++) {\n            [\"left\", \"right\", \"top\", \"bottom\"].forEach(dir => {\n                const hitbox = boxes[i].querySelector(\".hitbox-\" + dir) \n                hitbox.addEventListener(\"mouseenter\", () => {\n                    this.interractLine(Array.from(boxes[i].parentNode.children).indexOf(boxes[i]), Array.from(boxes[i].parentNode.parentNode.children).indexOf(boxes[i].parentElement), dir, \"select\", this.game.players[this.game.currentPlayer].color)\n                })\n                hitbox.addEventListener(\"mouseleave\", () => {\n                    this.interractLine(Array.from(boxes[i].parentNode.children).indexOf(boxes[i]), Array.from(boxes[i].parentNode.parentNode.children).indexOf(boxes[i].parentElement), dir, \"reset\")\n                })\n                hitbox.addEventListener(\"click\", () => {\n                    const x = Array.from(boxes[i].parentNode.children).indexOf(boxes[i])\n                    const y = Array.from(boxes[i].parentNode.parentNode.children).indexOf(boxes[i].parentElement)\n                    const currentPlayer = this.game.players[this.game.currentPlayer]\n                    this.interractLine(x, y, dir, \"click\", currentPlayer.color)\n                    const xy = this.game.playTurn(x, y, dir)\n                    \n                    const infos: UI_Infos = document.querySelector(\"game-infos\")\n                    infos.updateScore()\n                    if (xy != []) {\n                        for (let k = 0; k < xy.length; k++) {\n                            this.setBgColor(xy[k][0], xy[k][1], currentPlayer.color)\n                        }\n                    }\n\n                    if (this.game.isGameFinished()) {\n                        const endScreen = document.createElement(\"end-screen\")\n                        document.querySelector(\"body\").appendChild(endScreen)\n                        customElements.define(\"end-screen\", UI_End)\n                        UI_End.prototype.setWinner(this.game.getWinner())\n                    }\n                    \n                })\n            })\n        }\n    }\n\n    constructor() {\n        super()\n\n        const body = document.createElement(\"tbody\")\n        for (let i = 0; i < this.board_height; i++) {\n            const line = document.createElement(\"tr\");\n            for (let j = 0; j < this.board_width; j++) {\n\n                // Create dot elements\n                const dot_top_right = document.createElement(\"span\")\n                dot_top_right.className = \"dot dot-top-right\"\n                const dot_top_left = document.createElement(\"span\")\n                dot_top_left.className = \" dot dot-top-left\"\n                const dot_bottom_right = document.createElement(\"span\")\n                dot_bottom_right.className = \"dot dot-bottom-right\"\n                const dot_bottom_left = document.createElement(\"span\")\n                dot_bottom_left.className = \"dot dot-bottom-left\"\n                \n                const square = document.createElement(\"td\")\n                square.className = \"square\"\n\n                // Append dot elements\n                square.appendChild(dot_top_left)\n                if (j == this.board_width - 1) {\n                    square.appendChild(dot_top_right)\n                }\n                if (i == this.board_height - 1) {\n                    square.appendChild(dot_bottom_left)\n                }\n                if ((i == this.board_height - 1) && (j == this.board_width - 1)) {\n                    square.appendChild(dot_bottom_right)\n                }\n\n                [\"left\", \"right\", \"top\", \"bottom\"].forEach(dir => {\n                    const hitbox = document.createElement(\"span\")\n                    hitbox.className = \"hitbox hitbox-\" + dir\n                    square.appendChild(hitbox)\n                })\n\n                line.appendChild(square)\n            }\n            body.appendChild(line)\n        }\n        const table = document.createElement(\"table\")\n        table.appendChild(body)\n        this.appendChild(table)\n    }\n\n    interractLine(x: number, y: number, direction: string, interractionType: string = \"select\", color: string = \"none\") {\n        const typeString = interractionType == \"select\" ? \"selected\" : \"clicked\"\n        const table: HTMLTableElement = this.getElementsByTagName(\"table\")[0]\n        const box = table.rows[y].cells[x]\n\n        if (interractionType == \"click\" && box.className.includes(\"selected-\" + direction)) {\n            box.classList.remove(\"selected-\" + direction)\n        }\n\n        if (!box.className.includes(\"clicked-\" + direction)) {\n            switch (direction) {\n                case \"right\":\n                    if ((x < this.board_width-1)) {\n                        const neighborBox = table.rows[y].cells[x+1]\n\n                        if (interractionType == \"click\" && neighborBox.className.includes(\"selected-left\")) {\n                            neighborBox.classList.remove(\"selected-left\")\n                        }\n\n                        interractionType == \"reset\" ? [\"selected\"].forEach(c => neighborBox.classList.remove(c + \"-left\")) :\n                        neighborBox.classList.add(typeString + \"-left\") \n\n                        if (interractionType == \"click\") {\n                            neighborBox.classList.add(color + \"-left\")\n                        }\n                    }\n                    interractionType == \"reset\" ? [\"selected\"].forEach(c => box.classList.remove(c + \"-right\")) :\n                    box.classList.add(typeString + \"-right\")\n                    break\n                case \"left\":\n                    if ((x > 0)) {\n                        const neighborBox = table.rows[y].cells[x-1]\n\n                        if (interractionType == \"click\" && neighborBox.className.includes(\"selected-right\")) {\n                            neighborBox.classList.remove(\"selected-right\")\n                        }\n\n                        interractionType == \"reset\" ? [\"selected\"].forEach(c => neighborBox.classList.remove(c + \"-right\")) :\n                        neighborBox.classList.add(typeString + \"-right\")\n\n                        if (interractionType == \"click\") {\n                            neighborBox.classList.add(color + \"-right\")\n                        }\n                    }\n                    interractionType == \"reset\" ? [\"selected\"].forEach(c => box.classList.remove(c + \"-left\")) :\n                    box.classList.add(typeString + \"-left\")\n                    break\n                case \"top\":\n                    if ((y > 0)) {\n                        const neighborBox = table.rows[y-1].cells[x]\n\n                        if (interractionType == \"click\" && neighborBox.className.includes(\"selected-bottom\")) {\n                            neighborBox.classList.remove(\"selected-bottom\")\n                        }\n\n                        interractionType == \"reset\" ? [\"selected\"].forEach(c => neighborBox.classList.remove(c + \"-bottom\")) :\n                        neighborBox.classList.add(typeString + \"-bottom\")\n\n                        if (interractionType == \"click\") {\n                            neighborBox.classList.add(color + \"-bottom\")\n                        }\n                    }\n                    interractionType == \"reset\" ? [\"selected\"].forEach(c => box.classList.remove(c + \"-top\")) :\n                    box.classList.add(typeString + \"-top\")\n                    break\n                case \"bottom\":\n                    if ((y < this.board_height-1)) {\n                        const neighborBox = table.rows[y+1].cells[x]\n\n                        if (interractionType == \"click\" && neighborBox.className.includes(\"selected-\")) {\n                            neighborBox.classList.remove(\"selected-top\")\n                        }\n\n                        interractionType == \"reset\" ? [\"selected\"].forEach(c => neighborBox.classList.remove(c + \"-top\")) :\n                        neighborBox.classList.add(typeString + \"-top\")\n\n                        if (interractionType == \"click\") {\n                            neighborBox.classList.add(color + \"-top\")\n                        }\n                    }\n                    interractionType == \"reset\" ? [\"selected\"].forEach(c => box.classList.remove(c + \"-bottom\")) :\n                    box.classList.add(typeString + \"-bottom\")\n                    break\n            }\n            if (interractionType == \"click\") {\n                box.classList.add(color + \"-\" + direction)\n            }\n        }\n    }\n\n    setBgColor(x: number, y: number, color: string) {\n        const table: HTMLTableElement = this.getElementsByTagName(\"table\")[0]\n        const box = table.rows[y].cells[x]\n        box.classList.add(\"background-\" + color)\n    }\n}\n\n","import { Board, Square } from \"./Board\";\n\nexport interface Player {\n    name: string,\n    score: number,\n    color: string\n}\n\nexport class Game {\n    board: Board\n    players: Array<Player>\n    currentPlayer: number\n\n    constructor(board: Board, ...players: string[]) {\n        this.board = board;\n        const colors = [\"blue\", \"red\"]\n        this.players = []\n        let i = 0\n        players.map(playerName => {\n            this.players.push({name: playerName, score: 0, color: colors[i]})\n            i++\n        })\n        this.currentPlayer = 0\n    }\n\n    playLine(x: number, y: number, direction: string, name: string) {\n        this.board.setLineOwner(x,y,direction,name)\n    }\n\n    nextPlayer() {\n        this.currentPlayer != this.players.length - 1 ? this.currentPlayer++ : this.currentPlayer = 0\n    }\n\n    isSquareFull(square: Square): boolean {\n        return ((square.linesOwners.left != null) &&\n        (square.linesOwners.top != null) &&\n        (square.linesOwners.right != null) &&\n        (square.linesOwners.bottom != null))\n    }\n\n    isGameFinished() {\n        const boxesCount = this.board.width * this.board.height\n        let filledBoxesCount = 0\n        for (let y = 0; y < this.board.height; y++) {\n            for (let x = 0; x < this.board.width; x++) {\n                if (this.board.board[y][x].owner != null) {\n                    filledBoxesCount++\n                } else {\n                    return false\n                }\n            }\n        }\n        return filledBoxesCount == boxesCount\n    }\n\n    getWinner(): string | null {\n        if (this.players[0].score > this.players[1].score) {\n            return this.players[0].name\n        } else if (this.players[1].score > this.players[0].score) {\n            return this.players[1].name\n        } else {\n            return null\n        }\n    }\n\n    calculateBoxes() {\n        let turnScore = 0\n        let xy_arr = []\n        for (let y = 0; y < this.board.height; y++) {\n            for (let x = 0; x < this.board.width; x++) {\n                if (this.board.board[y][x].owner == null) {\n                    if (this.isSquareFull(this.board.board[y][x])) {\n                        this.board.board[y][x].owner = this.players[this.currentPlayer].name\n                        turnScore++\n                        xy_arr.push([x,y])\n                    }\n                }\n            }\n        }\n        return {score: turnScore, xy: xy_arr}\n    }\n\n    playTurn(x: number, y: number, direction: string) {\n        this.playLine(x, y, direction, this.players[this.currentPlayer].name)\n        let calculation = this.calculateBoxes()\n        let turnScore: number = calculation.score\n        if (turnScore <= 0) {\n            this.nextPlayer()\n        } else {\n            this.players[this.currentPlayer].score += turnScore\n        }\n        return calculation.xy\n    }\n}","import {Game, Player} from \"../Game\"\n\nexport default class UI_Infos extends HTMLElement {\n    game: Game\n\n    constructor() {\n        super()\n        const container = document.createElement(\"div\")\n        container.classList.add(\"game-infos-container\")\n        const score1 = document.createElement(\"span\")\n        const score2 = document.createElement(\"span\")\n        score1.classList.add(\"score-1\")\n        score2.classList.add(\"score-2\")\n        score1.innerHTML = this.game.players[0].name + \" : \" + this.game.players[0].score.toString()\n        score2.innerHTML = this.game.players[1].name + \" : \" + this.game.players[1].score.toString()\n\n        const scoreDiv = document.createElement(\"div\")\n        scoreDiv.classList.add(\"scores\")\n        scoreDiv.appendChild(score1)\n        scoreDiv.appendChild(score2)\n        container.appendChild(scoreDiv)\n\n        const currentPlayer = document.createElement(\"span\")\n        currentPlayer.classList.add(\"current-player\")\n        currentPlayer.innerHTML = \"Au tour de \" + this.game.players[this.game.currentPlayer].name + \" de jouer\"\n        container.appendChild(currentPlayer)\n\n        this.appendChild(container)\n    }\n\n    updateScore() {\n        const score1: HTMLSpanElement = document.querySelector(\".score-1\")\n        const score2: HTMLSpanElement = document.querySelector(\".score-2\")\n        const currentPlayer: HTMLSpanElement = document.querySelector(\".current-player\")\n\n        score1.innerHTML = this.game.players[0].name + \" : \" + this.game.players[0].score\n        score2.innerHTML = this.game.players[1].name + \" : \" + this.game.players[1].score\n        currentPlayer.innerHTML = \"Au tour de \" + this.game.players[this.game.currentPlayer].name + \" de jouer\"\n    }\n}","import {Board} from \"../Board\";\nimport UI_Board from \"./UI_Board\";\nimport {Game} from \"../Game\";\nimport UI_Infos from \"./UI_Infos\";\n\nexport default class UI_Creation extends HTMLElement {\n\n    connectedCallback() {\n        const submitButton: HTMLButtonElement = document.querySelector(\".validate-button\")\n        submitButton.addEventListener(\"click\", () => {\n            this.createGame()\n        })\n    }\n\n    constructor() {\n        super()\n\n        const overlay = document.createElement(\"div\")\n        overlay.classList.add(\"overlay\")\n\n        const container = document.createElement(\"div\")\n        container.classList.add(\"form-container\")\n\n        const player1Input = document.createElement(\"input\")\n        player1Input.classList.add(\"player1-input\")\n        player1Input.setAttribute(\"value\", \"Joueur 1\")\n        const player2Input = document.createElement(\"input\")\n        player2Input.classList.add(\"player2-input\")\n        player2Input.setAttribute(\"value\", \"Joueur 2\")\n\n        const validateButton = document.createElement(\"button\")\n        validateButton.classList.add(\"validate-button\")\n        validateButton.appendChild(document.createTextNode(\"Valider\"))\n\n        const inputsContainer = document.createElement(\"div\")\n        inputsContainer.classList.add(\"inputs-container\")\n        inputsContainer.appendChild(player1Input)\n        inputsContainer.appendChild(player2Input)\n\n        const sizeLabel = document.createElement(\"label\")\n        sizeLabel.appendChild(document.createTextNode(\"Taille de la grille :\"))\n        const sizeInput = document.createElement(\"input\")\n        sizeInput.classList.add(\"size-input\")\n        sizeInput.setAttribute(\"type\", \"number\")\n        sizeInput.setAttribute(\"value\", \"5\")\n        sizeInput.setAttribute(\"min\", \"4\")\n        sizeInput.setAttribute(\"max\", \"20\")\n\n        container.appendChild(inputsContainer)\n        container.appendChild(sizeLabel)\n        container.appendChild(sizeInput)\n        container.appendChild(validateButton)\n\n\n        overlay.appendChild(container)\n        this.appendChild(overlay)\n    }\n\n    createGame() {\n        const sizeInput: HTMLInputElement = document.querySelector(\".size-input\")\n        const boardSize = parseInt(sizeInput.value)\n        const board = new Board(boardSize, boardSize)\n\n        const player1: HTMLInputElement = document.querySelector(\".player1-input\")\n        const p1_name = player1.value\n        const player2: HTMLInputElement = document.querySelector(\".player2-input\")\n        const p2_name = player2.value\n\n        const overlay: HTMLDivElement = document.querySelector(\".overlay\")\n        overlay.style.display = \"none\"\n\n        const ui_board = document.createElement(\"game-board\")\n        ui_board.setAttribute(\"board-width\", boardSize.toString())\n        ui_board.setAttribute(\"board-height\", boardSize.toString())\n        document.querySelector(\".app\").appendChild(ui_board)\n        customElements.define(\"game-board\", UI_Board)\n\n        const game = new Game(board, p1_name, p2_name);\n        UI_Board.prototype.game = game;\n\n        UI_Infos.prototype.game = game;\n\n        const ui_infos = document.createElement(\"game-infos\")\n        customElements.define(\"game-infos\", UI_Infos)\n        document.querySelector(\".app\").appendChild(ui_infos)\n        \n    }\n}","import UI_Creation from \"./UI/UI_Creation\"\n\ncustomElements.define(\"game-creation\", UI_Creation)\n"],"names":["$bcd369778f872d1f$export$dc537a3a3893548e","constructor","width","height","this","board","i","line","j","push","owner","linesOwners","top","left","right","bottom","setSquareOwner","x","y","name","setLineOwner","direction","printBoard","str","console","log","$06eff6019c405e82$export$2e2bcd8739ae039","HTMLElement","connectedCallback","document","querySelector","addEventListener","super","overlay","createElement","classList","add","container","endText","replayButton","appendChild","createTextNode","setWinner","$d759c8766534d048$export$2e2bcd8739ae039","board_height","hasAttribute","parseInt","getAttribute","board_width","boxes","getElementsByTagName","length","forEach","dir","hitbox","interractLine","Array","from","parentNode","children","indexOf","parentElement","game","players","currentPlayer","color","xy","playTurn","updateScore","k","setBgColor","isGameFinished","endScreen","customElements","define","prototype","getWinner","body","dot_top_right","className","dot_top_left","dot_bottom_right","dot_bottom_left","square","table","interractionType","typeString","box","rows","cells","includes","remove","neighborBox","c","$7b066675d1aa79fa$export$985739bfa5723e08","colors","map","playerName","score","playLine","nextPlayer","isSquareFull","boxesCount","filledBoxesCount","calculateBoxes","turnScore","xy_arr","calculation","$e90b79a595231448$export$2e2bcd8739ae039","score1","score2","innerHTML","toString","scoreDiv","$7e78193218ebb0a2$export$2e2bcd8739ae039","createGame","player1Input","setAttribute","player2Input","validateButton","inputsContainer","sizeLabel","sizeInput","boardSize","value","p1_name","p2_name","style","display","ui_board","ui_infos"],"version":3,"file":"index.e5263f85.js.map"}